pipeline {
    agent {
        label 'jenkins-testes'
    }
    
    stages {
        stage('Atualizar Repositórios') {
            steps {
                script {
                    echo "Iniciando atualização dos repositórios..."
                    sh 'apt update'
                    echo "Repositórios atualizados com sucesso!"
                }
            }
        }
        
        stage('Atualizar Pacotes') {
            steps {
                script {
                    echo "Iniciando atualização dos pacotes..."
                    sh 'apt upgrade -y'
                    echo "Pacotes atualizados com sucesso!"
                }
            }
        }
        
        stage('Verificar e Instalar Docker') {
            steps {
                script {
                    echo "Verificando se o Docker está instalado..."
                    
                    // Verifica se o Docker está instalado
                    def dockerInstalled = sh(
                        script: 'which docker',
                        returnStatus: true
                    ) == 0
                    
                    if (!dockerInstalled) {
                        echo "Docker não encontrado. Instalando..."
                        sh '''
                            # Adicionar repositório oficial do Docker
                            apt-get update
                            apt-get install -y ca-certificates curl gnupg lsb-release
                            mkdir -p /etc/apt/keyrings
                            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
                            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
                            
                            # Instalar Docker
                            apt-get update
                            apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
                            
                            # Adicionar usuário jenkins ao grupo docker
                            usermod -aG docker jenkins
                        '''
                        echo "Docker instalado com sucesso!"
                    } else {
                        echo "Docker já está instalado!"
                        sh 'docker --version'
                    }
                    
                    // Verifica se o Docker Compose está instalado
                    def dockerComposeInstalled = sh(
                        script: 'which docker-compose',
                        returnStatus: true
                    ) == 0
                    
                    if (!dockerComposeInstalled) {
                        echo "Docker Compose não encontrado. Instalando..."
                        sh '''
                            # Instalar Docker Compose
                            curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                            chmod +x /usr/local/bin/docker-compose
                        '''
                        echo "Docker Compose instalado com sucesso!"
                    } else {
                        echo "Docker Compose já está instalado!"
                        sh 'docker-compose --version'
                    }
                    
                    // Verifica se o Docker está funcionando
                    sh 'docker info'
                    echo "Verificação do Docker concluída!"
                }
            }
        }
        
        stage('Verificar Status') {
            steps {
                script {
                    echo "Verificando status do sistema após atualizações..."
                    sh '''
                        echo "=== Informações do Sistema ==="
                        echo "Data/Hora: $(date)"
                        echo "Uptime: $(uptime)"
                        echo "Versão do Kernel: $(uname -r)"
                        echo "Distribuição: $(lsb_release -d | cut -f2)"
                        echo "=== Espaço em Disco ==="
                        df -h
                        echo "=== Memória ==="
                        free -h
                    '''
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "Pipeline de atualização do sistema concluído!"
            }
        }
        success {
            script {
                echo "✅ Atualizações realizadas com sucesso!"
            }
        }
        failure {
            script {
                echo "❌ Erro durante as atualizações!"
            }
        }
    }
} 