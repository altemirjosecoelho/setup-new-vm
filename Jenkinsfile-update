pipeline {
    agent {
        label 'jenkins-testes'
    }
    
    stages {
        stage('Atualizar Reposit√≥rios') {
            steps {
                script {
                    echo "Iniciando atualiza√ß√£o dos reposit√≥rios..."
                    sh 'apt update'
                    echo "Reposit√≥rios atualizados com sucesso!"
                }
            }
        }
        
        stage('Atualizar Pacotes') {
            steps {
                script {
                    echo "Iniciando atualiza√ß√£o dos pacotes..."
                    sh 'apt upgrade -y'
                    echo "Pacotes atualizados com sucesso!"
                }
            }
        }
        
        stage('Instalar Utilit√°rios Essenciais') {
            steps {
                script {
                    echo "Instalando utilit√°rios essenciais..."
                    
                    // Lista de pacotes essenciais para instalar
                    def essentialPackages = [
                        'apache2-utils',  // Para htpasswd
                        'curl',           // Para downloads
                        'wget',           // Para downloads alternativos
                        'git',            // Para controle de vers√£o
                        'unzip',          // Para extrair arquivos
                        'htop',           // Monitor de sistema
                        'tree'            // Visualizar estrutura de diret√≥rios
                    ]
                    
                    essentialPackages.each { pkg ->
                        def isInstalled = sh(
                            script: "dpkg -l | grep -q '^ii.*${pkg}'",
                            returnStatus: true
                        ) == 0
                        
                        if (!isInstalled) {
                            echo "üì¶ Instalando ${pkg}..."
                            sh "apt-get install -y ${pkg}"
                            echo "‚úÖ ${pkg} instalado com sucesso!"
                        } else {
                            echo "‚ÑπÔ∏è  ${pkg} j√° est√° instalado"
                        }
                    }
                    
                    echo "‚úÖ Utilit√°rios essenciais instalados/verificados!"
                    
                    // Verifica se htpasswd est√° funcionando
                    sh '''
                        echo "=== VERIFICA√á√ÉO DO HTPASSWD ==="
                        if command -v htpasswd &> /dev/null; then
                            echo "‚úÖ htpasswd encontrado: $(which htpasswd)"
                            echo "Vers√£o: $(htpasswd -h 2>&1 | head -1)"
                        else
                            echo "‚ùå htpasswd n√£o encontrado!"
                        fi
                        echo "================================"
                    '''
                }
            }
        }
        
        stage('Verificar e Instalar Docker') {
            steps {
                script {
                    echo "Verificando arquitetura do sistema..."
                    
                    // Detecta a arquitetura do processador
                    def architecture = sh(
                        script: 'uname -m',
                        returnStdout: true
                    ).trim()
                    
                    echo "Arquitetura detectada: ${architecture}"
                    
                    // Mapeia a arquitetura para o formato do Docker Compose
                    def dockerComposeArch = ""
                    if (architecture == "x86_64") {
                        dockerComposeArch = "x86_64"
                        echo "Processador AMD64 detectado"
                    } else if (architecture == "aarch64" || architecture == "arm64") {
                        dockerComposeArch = "aarch64"
                        echo "Processador ARM64 detectado"
                    } else {
                        error "Arquitetura n√£o suportada: ${architecture}"
                    }
                    
                    echo "Verificando se o Docker est√° instalado..."
                    
                    // Verifica se o Docker est√° instalado
                    def dockerInstalled = sh(
                        script: 'which docker',
                        returnStatus: true
                    ) == 0
                    
                    if (!dockerInstalled) {
                        echo "Docker n√£o encontrado. Instalando..."
                        sh '''
                            # Adicionar reposit√≥rio oficial do Docker
                            apt-get update
                            apt-get install -y ca-certificates curl gnupg lsb-release
                            mkdir -p /etc/apt/keyrings
                            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
                            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
                            
                            # Instalar Docker
                            apt-get update
                            apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
                            
                            # Adicionar usu√°rio jenkins ao grupo docker
                            usermod -aG docker jenkins
                        '''
                        echo "Docker instalado com sucesso!"
                    } else {
                        echo "Docker j√° est√° instalado!"
                        sh 'docker --version'
                    }
                    
                    // Verifica se o Docker Compose est√° instalado
                    def dockerComposeInstalled = sh(
                        script: 'which docker-compose',
                        returnStatus: true
                    ) == 0
                    
                    if (!dockerComposeInstalled) {
                        echo "Docker Compose n√£o encontrado. Instalando para arquitetura ${dockerComposeArch}..."
                        sh """
                            # Instalar Docker Compose para a arquitetura espec√≠fica
                            curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-linux-${dockerComposeArch}" -o /usr/local/bin/docker-compose
                            chmod +x /usr/local/bin/docker-compose
                        """
                        echo "Docker Compose instalado com sucesso para ${dockerComposeArch}!"
                    } else {
                        echo "Docker Compose j√° est√° instalado!"
                        sh 'docker-compose --version'
                    }
                    
                    // Verifica se o Docker est√° funcionando
                    sh 'docker info'
                    echo "Verifica√ß√£o do Docker conclu√≠da!"
                }
            }
        }
        
        stage('Verificar e Instalar Node.js v21') {
            steps {
                script {
                    echo "Verificando se o Node.js v21 est√° instalado..."
                    
                    // Verifica se o Node.js est√° instalado e qual vers√£o
                    def nodeInstalled = sh(
                        script: 'which node',
                        returnStatus: true
                    ) == 0
                    
                    def nodeVersion = ""
                    if (nodeInstalled) {
                        nodeVersion = sh(
                            script: 'node --version',
                            returnStdout: true
                        ).trim()
                        echo "Node.js encontrado: ${nodeVersion}"
                    }
                    
                    // Verifica se √© a vers√£o 21.x
                    def needsInstall = !nodeInstalled || !nodeVersion.startsWith("v21")
                    
                    if (needsInstall) {
                        echo "Node.js v21 n√£o encontrado. Instalando..."
                        
                        // Detecta a arquitetura novamente para o Node.js
                        def architecture = sh(
                            script: 'uname -m',
                            returnStdout: true
                        ).trim()
                        
                        def nodeArch = ""
                        if (architecture == "x86_64") {
                            nodeArch = "x64"
                            echo "Instalando Node.js v21 para AMD64"
                        } else if (architecture == "aarch64" || architecture == "arm64") {
                            nodeArch = "arm64"
                            echo "Instalando Node.js v21 para ARM64"
                        } else {
                            error "Arquitetura n√£o suportada para Node.js: ${architecture}"
                        }
                        
                        sh """
                            # Remover vers√µes antigas do Node.js se existirem
                            if command -v node &> /dev/null; then
                                echo "Removendo vers√£o anterior do Node.js..."
                                apt-get remove -y nodejs npm
                                rm -rf /usr/local/bin/node /usr/local/bin/npm
                            fi
                            
                            # Baixar e instalar Node.js v21
                            cd /tmp
                            curl -fsSL https://nodejs.org/dist/v21.7.1/node-v21.7.1-linux-${nodeArch}.tar.xz -o nodejs.tar.xz
                            tar -xf nodejs.tar.xz
                            mv node-v21.7.1-linux-${nodeArch} /usr/local/nodejs
                            
                            # Criar links simb√≥licos
                            ln -sf /usr/local/nodejs/bin/node /usr/local/bin/node
                            ln -sf /usr/local/nodejs/bin/npm /usr/local/bin/npm
                            ln -sf /usr/local/nodejs/bin/npx /usr/local/bin/npx
                            
                            # Limpar arquivos tempor√°rios
                            rm -f nodejs.tar.xz
                            
                            # Atualizar PATH para sess√£o atual
                            export PATH=/usr/local/bin:\$PATH
                        """
                        
                        echo "Node.js v21 instalado com sucesso!"
                    } else {
                        echo "Node.js v21 j√° est√° instalado!"
                    }
                    
                    // Verifica a instala√ß√£o
                    sh '''
                        echo "=== Verifica√ß√£o do Node.js ==="
                        node --version
                        npm --version
                        npx --version
                        echo "=== Verifica√ß√£o conclu√≠da ==="
                    '''
                }
            }
        }
        
        stage('Exibir Senha de Teste') {
            steps {
                script {
                    echo "=== SENHA DE TESTE ==="
                    
                    // Verifica se a vari√°vel de ambiente TEST_PASSWORD est√° definida
                    if (env.TEST_PASSWORD) {
                        echo "üîê Senha de teste configurada: ${env.TEST_PASSWORD}"
                    } else {
                        echo "‚ö†Ô∏è  Vari√°vel TEST_PASSWORD n√£o encontrada!"
                        echo "Para configurar a senha no Jenkins:"
                        echo "1. V√° em Configurar o Job"
                        echo "2. Se√ß√£o 'Build Environment'"
                        echo "3. Marque 'Inject environment variables'"
                        echo "4. Adicione: TEST_PASSWORD=sua_senha_aqui"
                        echo ""
                        echo "Ou configure como vari√°vel global no Jenkins:"
                        echo "Manage Jenkins > Configure System > Global properties"
                    }
                    
                    // Tamb√©m verifica outras vari√°veis de senha comuns
                    if (env.ADMIN_PASSWORD) {
                        echo "üîë Senha de administrador: ${env.ADMIN_PASSWORD}"
                    }
                    
                    if (env.DB_PASSWORD) {
                        echo "üóÑÔ∏è  Senha do banco de dados: ${env.DB_PASSWORD}"
                    }

                    if (env.DEFAULT_EMAIL) {
                        echo "üóÑÔ∏è  E-mail padr√£o: ${env.DEFAULT_EMAIL}"
                    }

                     if (env.DEFAULT_USER) {
                        echo "üóÑÔ∏è  Usu√°rio padr√£o: ${env.DEFAULT_USER}"
                    }
                    
                    echo "=== FIM DA SENHA DE TESTE ==="
                }
            }
        }
        
        stage('Verificar Status') {
            steps {
                script {
                    echo "Verificando status do sistema ap√≥s atualiza√ß√µes..."
                    sh '''
                        echo "=== Informa√ß√µes do Sistema ==="
                        echo "Data/Hora: $(date)"
                        echo "Uptime: $(uptime)"
                        echo "Vers√£o do Kernel: $(uname -r)"
                        echo "Distribui√ß√£o: $(lsb_release -d | cut -f2)"
                        echo "=== Espa√ßo em Disco ==="
                        df -h
                        echo "=== Mem√≥ria ==="
                        free -h
                    '''
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "Pipeline de atualiza√ß√£o do sistema conclu√≠do!"
            }
        }
        success {
            script {
                echo "‚úÖ Atualiza√ß√µes realizadas com sucesso!"
            }
        }
        failure {
            script {
                echo "‚ùå Erro durante as atualiza√ß√µes!"
            }
        }
    }
} 