pipeline {
    agent {
        label 'local-agent'
    }
    
    environment {
        // Configura√ß√µes de instala√ß√£o
        NODE_VERSION = '21.x'
        DOCKER_VERSION = 'latest'
        POSTGRES_VERSION = '15'
        REDIS_VERSION = '7'
        MONGODB_VERSION = '7'
        TRAEFIK_VERSION = 'latest'
        PORTAINER_VERSION = 'latest'
        PGADMIN_VERSION = 'latest'
        
        // Configura√ß√µes de containers
        POSTGRES_CONTAINER = 'postgres-app'
        REDIS_CONTAINER_1 = 'redis-app-6379'
        REDIS_CONTAINER_2 = 'redis-app-6380'
        MONGODB_CONTAINER = 'mongodb-app'
        TRAEFIK_CONTAINER = 'traefik'
        PORTAINER_CONTAINER = 'portainer'
        PGADMIN_CONTAINER = 'pgadmin'
        
        // Portas
        POSTGRES_PORT = '5432'
        REDIS_PORT_1 = '6379'
        REDIS_PORT_2 = '6380'
        MONGODB_PORT = '27017'
        TRAEFIK_PORT = '80'
        TRAEFIK_PORT_SSL = '443'
        PORTAINER_PORT = '9000'
        PGADMIN_PORT = '5050'
        
        // Banco de dados
        POSTGRES_DB = 'appdb'
        MONGODB_DB = 'appdb'
        
        // Dom√≠nios
        TRAEFIK_DOMAIN = 'traefik.testes.possoatender.com'
        PORTAINER_DOMAIN = 'portainer.testes.possoatender.com'
        PGADMIN_DOMAIN = 'pgadmin.testes.possoatender.com'
        
        // Docker Network
        DOCKER_NETWORK = 'traefik_network'
    }
    
    stages {
        stage('Configurar Credenciais') {
            steps {
                script {
                    // Configura√ß√µes de conex√£o SSH (devem ser configuradas no Jenkins)
                    env.VM_HOST = env.VM_HOST ?: '135.181.24.29'
                    env.VM_USER = env.VM_USER ?: 'jenkins'
                    env.SSH_KEY_PATH = env.SSH_KEY_PATH ?: '/var/lib/jenkins/.ssh/id_rsa'
                    
                    // Credenciais de banco de dados (devem ser configuradas no Jenkins)
                    env.POSTGRES_PASSWORD = env.POSTGRES_PASSWORD ?: 'postgres123'
                    env.MONGODB_PASSWORD = env.MONGODB_PASSWORD ?: 'mongo123'
                    env.PGADMIN_EMAIL = env.PGADMIN_EMAIL ?: 'admin@admin.com'
                    env.PGADMIN_PASSWORD = env.PGADMIN_PASSWORD ?: 'admin123'
                    env.PORTAINER_PASSWORD = env.PORTAINER_PASSWORD ?: 'my_password'
                    
                    echo 'üîê Credenciais configuradas via vari√°veis de ambiente'
                    echo "üñ•Ô∏è  VM: ${env.VM_HOST}"
                    echo "üë§ Usu√°rio: ${env.VM_USER}"
                    echo "üîë Chave SSH: ${env.SSH_KEY_PATH}"
                }
            }
        }
        
        stage('Verificar Conectividade SSH') {
            steps {
                script {
                    echo 'üîç Verificando conectividade SSH...'
                    
                    // Verificar se a chave SSH existe
                    sh '''
                        echo "üîë Verificando chave SSH..."
                        if [ -f "${SSH_KEY_PATH}" ]; then
                            echo "‚úÖ Chave SSH encontrada: ${SSH_KEY_PATH}"
                            ls -la "${SSH_KEY_PATH}"
                        else
                            echo "‚ùå Chave SSH n√£o encontrada: ${SSH_KEY_PATH}"
                            echo "üìÅ Conte√∫do do diret√≥rio .ssh:"
                            ls -la /var/lib/jenkins/.ssh/ || echo "Diret√≥rio .ssh n√£o existe"
                            echo "üîß Tentando criar chave SSH..."
                            mkdir -p /var/lib/jenkins/.ssh
                            ssh-keygen -t rsa -b 4096 -f /var/lib/jenkins/.ssh/id_rsa -N "" || echo "Falha ao criar chave SSH"
                        fi
                    '''
                    
                    // Testar conectividade SSH
                    sh '''
                        echo "üîç Testando conectividade SSH..."
                        echo "Tentando conectar via SSH..."
                        
                        # Tentar conex√£o SSH com timeout
                        timeout 10 ssh -i "${SSH_KEY_PATH}" -o StrictHostKeyChecking=no -o ConnectTimeout=5 "${VM_USER}@${VM_HOST}" 'echo "‚úÖ Conex√£o SSH estabelecida"' || {
                            echo "‚ùå Falha na conex√£o SSH"
                            echo "üîß Verificando configura√ß√µes..."
                            echo "Host: ${VM_HOST}"
                            echo "Usu√°rio: ${VM_USER}"
                            echo "Chave: ${SSH_KEY_PATH}"
                            
                            # Tentar ping
                            ping -c 3 "${VM_HOST}" && echo "‚úÖ Host acess√≠vel via ping" || echo "‚ùå Host n√£o acess√≠vel via ping"
                            
                            # Verificar porta SSH
                            nc -zv "${VM_HOST}" 22 && echo "‚úÖ Porta 22 acess√≠vel" || echo "‚ùå Porta 22 n√£o acess√≠vel"
                            
                            echo "üí° Dicas para resolver:"
                            echo "1. Verifique se a VM est√° rodando"
                            echo "2. Verifique se o usu√°rio '${VM_USER}' existe na VM"
                            echo "3. Verifique se a chave SSH p√∫blica est√° adicionada ao authorized_keys da VM"
                            echo "4. Verifique se o SSH est√° configurado para aceitar chaves p√∫blicas"
                            echo "5. Verifique se o firewall permite conex√µes SSH"
                            
                            exit 1
                        }
                    '''
                }
            }
        }
        
        stage('Criar Script de Setup') {
            steps {
                script {
                    echo 'üìù Criando script de setup...'
                    
                    // Cria o script de setup
                    sh '''
                        cat > setup-vm.sh << 'EOF'
                        #!/bin/bash
                        
                        # Cores para output
                        RED='\033[0;31m'
                        GREEN='\033[0;32m'
                        YELLOW='\033[1;33m'
                        BLUE='\033[0;34m'
                        NC='\033[0m' # No Color
                        
                        # Fun√ß√£o para log
                        log() {
                            echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
                        }
                        
                        error() {
                            echo -e "${RED}[ERRO]${NC} $1"
                        }
                        
                        warning() {
                            echo -e "${YELLOW}[AVISO]${NC} $1"
                        }
                        
                        info() {
                            echo -e "${BLUE}[INFO]${NC} $1"
                        }
                        
                        # Verificar se est√° rodando como root
                        if [[ $EUID -eq 0 ]]; then
                           error "Este script n√£o deve ser executado como root"
                           exit 1
                        fi
                        
                        log "üöÄ Iniciando setup da VM..."
                        
                        # Atualizar sistema
                        log "üì¶ Atualizando sistema..."
                        sudo apt-get update
                        sudo apt-get upgrade -y
                        
                        # Instalar depend√™ncias b√°sicas
                        log "üîß Instalando depend√™ncias b√°sicas..."
                        sudo apt-get install -y curl wget git vim htop tree jq unzip net-tools nginx certbot python3-certbot-nginx
                        
                        # Instalar Node.js
                        log "üì¶ Instalando Node.js ${NODE_VERSION}..."
                        curl -fsSL https://deb.nodesource.com/setup_21.x | sudo -E bash -
                        sudo apt-get install -y nodejs
                        
                        # Instalar PM2
                        log "‚ö° Instalando PM2..."
                        sudo npm install -g pm2 nodemon concurrently cross-env
                        
                        # Instalar Docker
                        log "üê≥ Instalando Docker..."
                        sudo apt-get remove -y docker docker-engine docker.io containerd runc || true
                        sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
                        
                        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                        
                        sudo apt-get update
                        sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
                        
                        # Adicionar usu√°rio ao grupo docker
                        sudo usermod -aG docker $USER
                        
                        # Iniciar e habilitar Docker
                        sudo systemctl start docker
                        sudo systemctl enable docker
                        
                        # Criar diret√≥rios para volumes
                        log "üìÅ Criando diret√≥rios para volumes..."
                        sudo mkdir -p /opt/docker/volumes/{postgres,redis-6380,mongodb,traefik,portainer,pgadmin}
                        sudo chown -R 1000:1000 /opt/docker/volumes/
                        
                        # Parar e remover containers existentes
                        log "üßπ Limpando containers existentes..."
                        docker stop traefik portainer postgres-app redis-app-6379 redis-app-6380 mongodb-app pgadmin 2>/dev/null || true
                        docker rm traefik portainer postgres-app redis-app-6379 redis-app-6380 mongodb-app pgadmin 2>/dev/null || true
                        
                        # Criar rede Docker
                        docker network create traefik_network 2>/dev/null || true
                        
                        # Executar Traefik
                        log "üåê Iniciando Traefik..."
                        docker run -d \
                            --name traefik \
                            --network traefik_network \
                            -p 80:80 \
                            -p 443:443 \
                            -v /var/run/docker.sock:/var/run/docker.sock:ro \
                            -v /opt/docker/volumes/traefik:/etc/traefik \
                            -l traefik.enable=true \
                            -l traefik.http.routers.traefik.rule="Host(traefik.testes.possoatender.com)" \
                            -l traefik.http.routers.traefik.entrypoints=web \
                            -l traefik.http.services.traefik.loadbalancer.server.port=8080 \
                            traefik:latest \
                            --api.dashboard=true \
                            --api.insecure=true \
                            --providers.docker=true \
                            --providers.docker.exposedbydefault=false \
                            --entrypoints.web.address=:80 \
                            --entrypoints.websecure.address=:443
                        
                        # Executar PostgreSQL
                        log "üóÑÔ∏è Iniciando PostgreSQL..."
                        docker run -d \
                            --name postgres-app \
                            --network traefik_network \
                            -e POSTGRES_PASSWORD=postgres123 \
                            -e POSTGRES_DB=appdb \
                            -p 5432:5432 \
                            -v /opt/docker/volumes/postgres:/var/lib/postgresql/data \
                            postgres:15
                        
                        # Executar Redis 1 (sem persist√™ncia)
                        log "üî¥ Iniciando Redis 1 (6379) - sem persist√™ncia..."
                        docker run -d \
                            --name redis-app-6379 \
                            --network traefik_network \
                            -p 6379:6379 \
                            redis:7 \
                            redis-server --save "" --appendonly no
                        
                        # Executar Redis 2 (com persist√™ncia)
                        log "üî¥ Iniciando Redis 2 (6380) - com persist√™ncia..."
                        docker run -d \
                            --name redis-app-6380 \
                            --network traefik_network \
                            -p 6380:6379 \
                            -v /opt/docker/volumes/redis-6380:/data \
                            redis:7 \
                            redis-server --appendonly yes
                        
                        # Executar MongoDB
                        log "üçÉ Iniciando MongoDB..."
                        docker run -d \
                            --name mongodb-app \
                            --network traefik_network \
                            -e MONGO_INITDB_ROOT_USERNAME=admin \
                            -e MONGO_INITDB_ROOT_PASSWORD=mongo123 \
                            -e MONGO_INITDB_DATABASE=appdb \
                            -p 27017:27017 \
                            -v /opt/docker/volumes/mongodb:/data/db \
                            mongo:7
                        
                        # Executar Portainer
                        log "üê≥ Iniciando Portainer..."
                        docker run -d \
                            --name portainer \
                            --network traefik_network \
                            -p 9000:9000 \
                            -v /var/run/docker.sock:/var/run/docker.sock:ro \
                            -v /opt/docker/volumes/portainer:/data \
                            -l traefik.enable=true \
                            -l traefik.http.routers.portainer.rule="Host(portainer.testes.possoatender.com)" \
                            -l traefik.http.routers.portainer.entrypoints=web \
                            -l traefik.http.services.portainer.loadbalancer.server.port=9000 \
                            portainer/portainer-ce:latest
                        
                        # Executar pgAdmin
                        log "üìä Iniciando pgAdmin..."
                        docker run -d \
                            --name pgadmin \
                            --network traefik_network \
                            -e PGADMIN_DEFAULT_EMAIL=admin@admin.com \
                            -e PGADMIN_DEFAULT_PASSWORD=admin123 \
                            -p 5050:80 \
                            -v /opt/docker/volumes/pgadmin:/var/lib/pgadmin \
                            -l traefik.enable=true \
                            -l traefik.http.routers.pgadmin.rule="Host(pgadmin.testes.possoatender.com)" \
                            -l traefik.http.routers.pgadmin.entrypoints=web \
                            -l traefik.http.services.pgadmin.loadbalancer.server.port=80 \
                            dpage/pgadmin4:latest
                        
                        # Aguardar inicializa√ß√£o
                        log "‚è≥ Aguardando inicializa√ß√£o dos containers..."
                        sleep 30
                        
                        # Configurar firewall
                        log "üî• Configurando firewall..."
                        sudo apt-get install -y ufw
                        sudo ufw --force reset
                        sudo ufw default deny incoming
                        sudo ufw default allow outgoing
                        sudo ufw allow ssh
                        sudo ufw allow 80/tcp
                        sudo ufw allow 443/tcp
                        sudo ufw allow 3000/tcp
                        sudo ufw allow 8080/tcp
                        sudo ufw allow 9000/tcp
                        sudo ufw allow 5050/tcp
                        sudo ufw --force enable
                        
                        # Testes finais
                        log "üß™ Executando testes finais..."
                        
                        echo "üîç Teste 1: Node.js"
                        node --version && echo "‚úÖ Node.js OK" || echo "‚ùå Node.js falhou"
                        
                        echo "üîç Teste 2: Docker"
                        docker --version && echo "‚úÖ Docker OK" || echo "‚ùå Docker falhou"
                        
                        echo "üîç Teste 3: PostgreSQL"
                        docker exec postgres-app pg_isready -U postgres && echo "‚úÖ PostgreSQL OK" || echo "‚ùå PostgreSQL falhou"
                        
                        echo "üîç Teste 4: Redis 1"
                        docker exec redis-app-6379 redis-cli ping && echo "‚úÖ Redis 1 OK" || echo "‚ùå Redis 1 falhou"
                        
                        echo "üîç Teste 5: Redis 2"
                        docker exec redis-app-6380 redis-cli ping && echo "‚úÖ Redis 2 OK" || echo "‚ùå Redis 2 falhou"
                        
                        echo "üîç Teste 6: MongoDB"
                        docker exec mongodb-app mongosh --eval "db.adminCommand('ping')" && echo "‚úÖ MongoDB OK" || echo "‚ùå MongoDB falhou"
                        
                        echo "üîç Teste 7: PM2"
                        pm2 --version && echo "‚úÖ PM2 OK" || echo "‚ùå PM2 falhou"
                        
                        # Status dos containers
                        log "üìä Status dos containers:"
                        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
                        
                        # Resumo final
                        log "üéâ Setup conclu√≠do com sucesso!"
                        echo "=========================================="
                        echo "üéØ INFRAESTRUTURA CONFIGURADA COM SUCESSO"
                        echo "üñ•Ô∏è  Sistema: $(uname -a)"
                        echo "üì¶ Node.js: $(node --version)"
                        echo "üê≥ Docker: $(docker --version)"
                        echo "üåê Traefik: https://traefik.testes.possoatender.com"
                        echo "üê≥ Portainer: https://portainer.testes.possoatender.com"
                        echo "üìä pgAdmin: https://pgadmin.testes.possoatender.com"
                        echo "üóÑÔ∏è  PostgreSQL: Rodando na porta 5432"
                        echo "üî¥ Redis 1: Rodando na porta 6379 (cache tempor√°rio)"
                        echo "üî¥ Redis 2: Rodando na porta 6380 (com persist√™ncia)"
                        echo "üçÉ MongoDB: Rodando na porta 27017"
                        echo "üõ†Ô∏è  Ferramentas: PM2, Git, Nginx, etc."
                        echo "üî• Firewall: Configurado e ativo"
                        echo ""
                        echo "üîê CREDENCIAIS:"
                        echo "   Portainer: admin / my_password"
                        echo "   pgAdmin: admin@admin.com / admin123"
                        echo "   PostgreSQL: postgres / postgres123"
                        echo "   MongoDB: admin / mongo123"
                        echo "=========================================="
                        EOF
                        
                        chmod +x setup-vm.sh
                    '''
                }
            }
        }
        
        stage('Copiar e Executar Script') {
            steps {
                script {
                    echo 'üì§ Copiando script para a VM...'
                    
                    // Copiar script para a VM
                    sh "scp -i ${SSH_KEY_PATH} -o StrictHostKeyChecking=no setup-vm.sh ${VM_USER}@${VM_HOST}:/tmp/"
                    
                    echo 'üöÄ Executando script na VM...'
                    
                    // Executar script na VM
                    sh "ssh -i ${SSH_KEY_PATH} -o StrictHostKeyChecking=no ${VM_USER}@${VM_HOST} 'bash /tmp/setup-vm.sh'"
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo 'üèÅ Setup da VM finalizado!'
                echo "üìä Resumo do ambiente configurado:"
                echo "   üñ•Ô∏è  VM: ${VM_HOST}"
                echo "   üë§ Usu√°rio: ${VM_USER}"
                echo "   üì¶ Node.js: ${NODE_VERSION}"
                echo "   üê≥ Docker: ${DOCKER_VERSION}"
                echo "   üóÑÔ∏è  PostgreSQL: ${POSTGRES_VERSION}"
                echo "   üî¥ Redis: ${REDIS_VERSION} (2 inst√¢ncias)"
                echo "   üçÉ MongoDB: ${MONGODB_VERSION}"
                echo "   üåê Traefik: ${TRAEFIK_VERSION}"
                echo "   üê≥ Portainer: ${PORTAINER_VERSION}"
                echo "   üìä pgAdmin: ${PGADMIN_VERSION}"
            }
        }
        success {
            echo 'üéâ Setup da VM realizado com sucesso!'
        }
        failure {
            echo '‚ùå Setup da VM falhou!'
            echo 'üîç Verifique os logs para identificar o problema'
        }
        cleanup {
            echo 'üßπ Limpeza final...'
            // Limpar arquivo tempor√°rio
            sh "rm -f setup-vm.sh"
        }
    }
} 