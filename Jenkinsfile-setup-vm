pipeline {
    agent {
        label 'local-agent'
    }
    
    environment {
        // Configura√ß√µes de instala√ß√£o
        NODE_VERSION = '21.x'
        DOCKER_VERSION = 'latest'
        POSTGRES_VERSION = '15'
        REDIS_VERSION = '7'
        MONGODB_VERSION = '7'
        TRAEFIK_VERSION = 'latest'
        PORTAINER_VERSION = 'latest'
        PGADMIN_VERSION = 'latest'
        
        // Configura√ß√µes de containers
        POSTGRES_CONTAINER = 'postgres-app'
        REDIS_CONTAINER_1 = 'redis-app-6379'
        REDIS_CONTAINER_2 = 'redis-app-6380'
        MONGODB_CONTAINER = 'mongodb-app'
        TRAEFIK_CONTAINER = 'traefik'
        PORTAINER_CONTAINER = 'portainer'
        PGADMIN_CONTAINER = 'pgadmin'
        
        // Portas
        POSTGRES_PORT = '5432'
        REDIS_PORT_1 = '6379'
        REDIS_PORT_2 = '6380'
        MONGODB_PORT = '27017'
        TRAEFIK_PORT = '80'
        TRAEFIK_PORT_SSL = '443'
        PORTAINER_PORT = '9000'
        PGADMIN_PORT = '5050'
        
        // Banco de dados
        POSTGRES_DB = 'appdb'
        MONGODB_DB = 'appdb'
        
        // Dom√≠nios
        TRAEFIK_DOMAIN = 'traefik.testes.possoatender.com'
        PORTAINER_DOMAIN = 'portainer.testes.possoatender.com'
        PGADMIN_DOMAIN = 'pgadmin.testes.possoatender.com'
        
        // Docker Network
        DOCKER_NETWORK = 'traefik_network'
    }
    
    stages {
        stage('Configurar Credenciais') {
            steps {
                script {
                    // Configura√ß√µes de conex√£o SSH (devem ser configuradas no Jenkins)
                    env.VM_HOST = env.VM_HOST ?: '135.181.24.29'
                    env.VM_USER = env.VM_USER ?: 'jenkins'
                    env.SSH_KEY_PATH = env.SSH_KEY_PATH ?: '/var/lib/jenkins/.ssh/id_rsa'
                    
                    // Credenciais de banco de dados (devem ser configuradas no Jenkins)
                    env.POSTGRES_PASSWORD = env.POSTGRES_PASSWORD ?: 'postgres123'
                    env.MONGODB_PASSWORD = env.MONGODB_PASSWORD ?: 'mongo123'
                    env.PGADMIN_EMAIL = env.PGADMIN_EMAIL ?: 'admin@admin.com'
                    env.PGADMIN_PASSWORD = env.PGADMIN_PASSWORD ?: 'admin123'
                    env.PORTAINER_PASSWORD = env.PORTAINER_PASSWORD ?: 'my_password'
                    
                    echo 'üîê Credenciais configuradas via vari√°veis de ambiente'
                    echo "üñ•Ô∏è  VM: ${env.VM_HOST}"
                    echo "üë§ Usu√°rio: ${env.VM_USER}"
                }
            }
        }
        
        stage('Verificar Conectividade') {
            steps {
                script {
                    echo 'üîç Verificando conectividade com a VM...'
                    sh '''
                        # Testa conectividade SSH
                        ssh -i ${SSH_KEY_PATH} -o StrictHostKeyChecking=no ${VM_USER}@${VM_HOST} 'echo "‚úÖ Conex√£o SSH estabelecida"'
                        
                        # Verifica informa√ß√µes b√°sicas da VM
                        ssh -i ${SSH_KEY_PATH} ${VM_USER}@${VM_HOST} '''
                            echo "üñ•Ô∏è  Sistema: \$(uname -a)"
                            echo "üíæ Mem√≥ria: \$(free -h)"
                            echo "üíø Disco: \$(df -h)"
                            echo "üåê IP: \$(hostname -I)"
                        '''
                    '''
                }
            }
        }
        
        stage('Verificar Depend√™ncias Existentes') {
            steps {
                script {
                    echo 'üîç Verificando depend√™ncias j√° instaladas...'
                    sh '''
                        ssh -i ${SSH_KEY_PATH} ${VM_USER}@${VM_HOST} '''
                            echo "üì¶ Verificando Node.js..."
                            if command -v node &> /dev/null; then
                                echo "‚úÖ Node.js encontrado: \$(node --version)"
                            else
                                echo "‚ùå Node.js n√£o encontrado"
                            fi
                            
                            echo "üê≥ Verificando Docker..."
                            if command -v docker &> /dev/null; then
                                echo "‚úÖ Docker encontrado: \$(docker --version)"
                            else
                                echo "‚ùå Docker n√£o encontrado"
                            fi
                            
                            echo "üì¶ Verificando NPM..."
                            if command -v npm &> /dev/null; then
                                echo "‚úÖ NPM encontrado: \$(npm --version)"
                            else
                                echo "‚ùå NPM n√£o encontrado"
                            fi
                            
                            echo "üîß Verificando Git..."
                            if command -v git &> /dev/null; then
                                echo "‚úÖ Git encontrado: \$(git --version)"
                            else
                                echo "‚ùå Git n√£o encontrado"
                            fi
                        '''
                    '''
                }
            }
        }
        
        stage('Instalar Node.js') {
            when {
                expression {
                    return true // Sempre executa para garantir vers√£o correta
                }
            }
            steps {
                script {
                    echo 'üì¶ Instalando/Atualizando Node.js...'
                    sh '''
                        ssh -i ${SSH_KEY_PATH} ${VM_USER}@${VM_HOST} '''
                            # Atualiza reposit√≥rios
                            sudo apt-get update
                            
                            # Remove vers√µes antigas do Node.js
                            sudo apt-get remove -y nodejs npm || true
                            
                            # Instala Node.js via NodeSource
                            curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION} | sudo -E bash -
                            sudo apt-get install -y nodejs
                            
                            # Verifica instala√ß√£o
                            echo "‚úÖ Node.js instalado: \$(node --version)"
                            echo "‚úÖ NPM instalado: \$(npm --version)"
                            
                            # Instala PM2 para gerenciamento de processos
                            sudo npm install -g pm2
                            echo "‚úÖ PM2 instalado: \$(pm2 --version)"
                        '''
                    '''
                }
            }
        }
        
        stage('Instalar Docker') {
            when {
                expression {
                    return true // Sempre executa para garantir vers√£o correta
                }
            }
            steps {
                script {
                    echo 'üê≥ Instalando/Atualizando Docker...'
                    sh '''
                        ssh -i ${SSH_KEY_PATH} ${VM_USER}@${VM_HOST} '''
                            # Remove vers√µes antigas
                            sudo apt-get remove -y docker docker-engine docker.io containerd runc || true
                            
                            # Instala depend√™ncias
                            sudo apt-get update
                            sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
                            
                            # Adiciona reposit√≥rio oficial do Docker
                            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                            echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                            
                            # Instala Docker
                            sudo apt-get update
                            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
                            
                            # Adiciona usu√°rio ao grupo docker
                            sudo usermod -aG docker ${USER}
                            
                            # Inicia e habilita Docker
                            sudo systemctl start docker
                            sudo systemctl enable docker
                            
                            # Verifica instala√ß√£o
                            echo "‚úÖ Docker instalado: \$(docker --version)"
                            echo "‚úÖ Docker Compose instalado: \$(docker compose version)"
                        '''
                    '''
                }
            }
        }
        
        stage('Configurar Infraestrutura Docker') {
            steps {
                script {
                    echo 'üèóÔ∏è Configurando infraestrutura Docker completa...'
                    sh '''
                        ssh -i ${SSH_KEY_PATH} ${VM_USER}@${VM_HOST} '''
                            # Para containers existentes
                            docker stop ${TRAEFIK_CONTAINER} ${PORTAINER_CONTAINER} ${POSTGRES_CONTAINER} ${REDIS_CONTAINER_1} ${REDIS_CONTAINER_2} ${MONGODB_CONTAINER} ${PGADMIN_CONTAINER} || true
                            docker rm ${TRAEFIK_CONTAINER} ${PORTAINER_CONTAINER} ${POSTGRES_CONTAINER} ${REDIS_CONTAINER_1} ${REDIS_CONTAINER_2} ${MONGODB_CONTAINER} ${PGADMIN_CONTAINER} || true
                            
                            # Cria rede para containers
                            docker network create ${DOCKER_NETWORK} || true
                            
                            # Cria diret√≥rios para volumes
                            sudo mkdir -p /opt/docker/volumes/postgres
                            sudo mkdir -p /opt/docker/volumes/redis-6380
                            sudo mkdir -p /opt/docker/volumes/mongodb
                            sudo mkdir -p /opt/docker/volumes/traefik
                            sudo mkdir -p /opt/docker/volumes/portainer
                            sudo mkdir -p /opt/docker/volumes/pgadmin
                            
                            # Configura permiss√µes
                            sudo chown -R 1000:1000 /opt/docker/volumes/
                            
                            # Executa Traefik (Load Balancer/Reverse Proxy)
                            docker run -d \\
                                --name ${TRAEFIK_CONTAINER} \\
                                --network ${DOCKER_NETWORK} \\
                                -p ${TRAEFIK_PORT}:80 \\
                                -p ${TRAEFIK_PORT_SSL}:443 \\
                                -v /var/run/docker.sock:/var/run/docker.sock:ro \\
                                -v /opt/docker/volumes/traefik:/etc/traefik \\
                                -l traefik.enable=true \\
                                -l traefik.http.routers.traefik.rule="Host(\`${TRAEFIK_DOMAIN}\`)" \\
                                -l traefik.http.routers.traefik.entrypoints=web \\
                                -l traefik.http.services.traefik.loadbalancer.server.port=8080 \\
                                traefik:${TRAEFIK_VERSION} \\
                                --api.dashboard=true \\
                                --api.insecure=true \\
                                --providers.docker=true \\
                                --providers.docker.exposedbydefault=false \\
                                --entrypoints.web.address=:80 \\
                                --entrypoints.websecure.address=:443
                            
                            # Executa PostgreSQL
                            docker run -d \\
                                --name ${POSTGRES_CONTAINER} \\
                                --network ${DOCKER_NETWORK} \\
                                -e POSTGRES_PASSWORD=${POSTGRES_PASSWORD} \\
                                -e POSTGRES_DB=${POSTGRES_DB} \\
                                -p ${POSTGRES_PORT}:5432 \\
                                -v /opt/docker/volumes/postgres:/var/lib/postgresql/data \\
                                postgres:${POSTGRES_VERSION}
                            
                            # Executa Redis 1 (porta 6379) - SEM persist√™ncia (cache tempor√°rio)
                            docker run -d \\
                                --name ${REDIS_CONTAINER_1} \\
                                --network ${DOCKER_NETWORK} \\
                                -p ${REDIS_PORT_1}:6379 \\
                                redis:${REDIS_VERSION} \\
                                redis-server --save "" --appendonly no
                            
                            # Executa Redis 2 (porta 6380) - COM persist√™ncia
                            docker run -d \\
                                --name ${REDIS_CONTAINER_2} \\
                                --network ${DOCKER_NETWORK} \\
                                -p ${REDIS_PORT_2}:6379 \\
                                -v /opt/docker/volumes/redis-6380:/data \\
                                redis:${REDIS_VERSION} \\
                                redis-server --appendonly yes
                            
                            # Executa MongoDB
                            docker run -d \\
                                --name ${MONGODB_CONTAINER} \\
                                --network ${DOCKER_NETWORK} \\
                                -e MONGO_INITDB_ROOT_USERNAME=admin \\
                                -e MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD} \\
                                -e MONGO_INITDB_DATABASE=${MONGODB_DB} \\
                                -p ${MONGODB_PORT}:27017 \\
                                -v /opt/docker/volumes/mongodb:/data/db \\
                                mongo:${MONGODB_VERSION}
                            
                            # Executa Portainer
                            docker run -d \\
                                --name ${PORTAINER_CONTAINER} \\
                                --network ${DOCKER_NETWORK} \\
                                -p ${PORTAINER_PORT}:9000 \\
                                -v /var/run/docker.sock:/var/run/docker.sock:ro \\
                                -v /opt/docker/volumes/portainer:/data \\
                                -l traefik.enable=true \\
                                -l traefik.http.routers.portainer.rule="Host(\`${PORTAINER_DOMAIN}\`)" \\
                                -l traefik.http.routers.portainer.entrypoints=web \\
                                -l traefik.http.services.portainer.loadbalancer.server.port=9000 \\
                                portainer/portainer-ce:${PORTAINER_VERSION}
                            
                            # Executa pgAdmin
                            docker run -d \\
                                --name ${PGADMIN_CONTAINER} \\
                                --network ${DOCKER_NETWORK} \\
                                -e PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL} \\
                                -e PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD} \\
                                -p ${PGADMIN_PORT}:80 \\
                                -v /opt/docker/volumes/pgadmin:/var/lib/pgadmin \\
                                -l traefik.enable=true \\
                                -l traefik.http.routers.pgadmin.rule="Host(\`${PGADMIN_DOMAIN}\`)" \\
                                -l traefik.http.routers.pgadmin.entrypoints=web \\
                                -l traefik.http.services.pgadmin.loadbalancer.server.port=80 \\
                                dpage/pgadmin4:${PGADMIN_VERSION}
                            
                            # Aguarda inicializa√ß√£o
                            sleep 15
                            
                            # Verifica se containers est√£o rodando
                            echo "üìä Status dos containers:"
                            docker ps --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}"
                            
                            # Testa conex√µes
                            echo "üîç Testando PostgreSQL..."
                            docker exec ${POSTGRES_CONTAINER} pg_isready -U postgres && echo "‚úÖ PostgreSQL OK" || echo "‚ùå PostgreSQL falhou"
                            
                            echo "üîç Testando Redis 1 (6379)..."
                            docker exec ${REDIS_CONTAINER_1} redis-cli ping && echo "‚úÖ Redis 1 OK" || echo "‚ùå Redis 1 falhou"
                            
                            echo "üîç Testando Redis 2 (6380)..."
                            docker exec ${REDIS_CONTAINER_2} redis-cli ping && echo "‚úÖ Redis 2 OK" || echo "‚ùå Redis 2 falhou"
                            
                            echo "üîç Testando MongoDB..."
                            docker exec ${MONGODB_CONTAINER} mongosh --eval "db.adminCommand('ping')" && echo "‚úÖ MongoDB OK" || echo "‚ùå MongoDB falhou"
                        '''
                    '''
                }
            }
        }
        
        stage('Configurar Usu√°rios e Senhas') {
            steps {
                script {
                    echo 'üîê Configurando usu√°rios e senhas...'
                    sh '''
                        ssh -i ${SSH_KEY_PATH} ${VM_USER}@${VM_HOST} '''
                            echo "üîê Configurando Portainer..."
                            # Aguarda Portainer inicializar completamente
                            sleep 30
                            
                            # Cria arquivo de configura√ß√£o para Portainer
                            cat > /tmp/portainer-setup.json << EOF
                            {
                                "Username": "admin",
                                "Password": "${PORTAINER_PASSWORD}"
                            }
                            EOF
                            
                            echo "‚úÖ Configura√ß√µes de usu√°rio criadas"
                            echo "üìã Resumo das credenciais:"
                            echo "   üê≥ Portainer: admin / ${PORTAINER_PASSWORD}"
                            echo "   üóÑÔ∏è  pgAdmin: ${PGADMIN_EMAIL} / ${PGADMIN_PASSWORD}"
                            echo "   üóÑÔ∏è  PostgreSQL: postgres / ${POSTGRES_PASSWORD}"
                            echo "   üî¥ Redis 6379: sem autentica√ß√£o (cache tempor√°rio, sem persist√™ncia)"
                            echo "   üî¥ Redis 6380: sem autentica√ß√£o (com persist√™ncia)"
                            echo "   üçÉ MongoDB: admin / ${MONGODB_PASSWORD}"
                        '''
                    '''
                }
            }
        }
        
        stage('Instalar Ferramentas Adicionais') {
            steps {
                script {
                    echo 'üõ†Ô∏è Instalando ferramentas adicionais...'
                    sh '''
                        ssh -i ${SSH_KEY_PATH} ${VM_USER}@${VM_HOST} '''
                            # Atualiza reposit√≥rios
                            sudo apt-get update
                            
                            # Instala ferramentas √∫teis
                            sudo apt-get install -y \\
                                htop \\
                                tree \\
                                jq \\
                                curl \\
                                wget \\
                                unzip \\
                                git \\
                                vim \\
                                net-tools \\
                                nginx \\
                                certbot \\
                                python3-certbot-nginx
                            
                            # Instala ferramentas de monitoramento
                            sudo npm install -g \\
                                nodemon \\
                                concurrently \\
                                cross-env
                            
                            echo "‚úÖ Ferramentas adicionais instaladas"
                        '''
                    '''
                }
            }
        }
        
        stage('Configurar Firewall') {
            steps {
                script {
                    echo 'üî• Configurando firewall...'
                    sh '''
                        ssh -i ${SSH_KEY_PATH} ${VM_USER}@${VM_HOST} '''
                            # Instala UFW se n√£o estiver instalado
                            sudo apt-get install -y ufw
                            
                            # Configura regras b√°sicas
                            sudo ufw --force reset
                            sudo ufw default deny incoming
                            sudo ufw default allow outgoing
                            
                            # Permite SSH
                            sudo ufw allow ssh
                            
                            # Permite portas da aplica√ß√£o
                            sudo ufw allow 80/tcp   # HTTP
                            sudo ufw allow 443/tcp  # HTTPS
                            sudo ufw allow 3000/tcp # Node.js app
                            sudo ufw allow 8080/tcp # Jenkins
                            sudo ufw allow 9000/tcp # Portainer
                            sudo ufw allow 5050/tcp # pgAdmin
                            
                            # Habilita firewall
                            sudo ufw --force enable
                            
                            echo "‚úÖ Firewall configurado"
                            sudo ufw status
                        '''
                    '''
                }
            }
        }
        
        stage('Teste Final do Ambiente') {
            steps {
                script {
                    echo 'üß™ Executando testes finais do ambiente...'
                    sh '''
                        ssh -i ${SSH_KEY_PATH} ${VM_USER}@${VM_HOST} '''
                            echo "üîç Teste 1: Node.js"
                            node --version && echo "‚úÖ Node.js OK" || echo "‚ùå Node.js falhou"
                            
                            echo "üîç Teste 2: NPM"
                            npm --version && echo "‚úÖ NPM OK" || echo "‚ùå NPM falhou"
                            
                            echo "üîç Teste 3: Docker"
                            docker --version && echo "‚úÖ Docker OK" || echo "‚ùå Docker falhou"
                            
                            echo "üîç Teste 4: PostgreSQL Container"
                            docker exec ${POSTGRES_CONTAINER} pg_isready -U postgres && echo "‚úÖ PostgreSQL OK" || echo "‚ùå PostgreSQL falhou"
                            
                            echo "üîç Teste 5: Redis Container 1 (6379)"
                            docker exec ${REDIS_CONTAINER_1} redis-cli ping && echo "‚úÖ Redis 1 OK" || echo "‚ùå Redis 1 falhou"
                            
                            echo "üîç Teste 6: Redis Container 2 (6380)"
                            docker exec ${REDIS_CONTAINER_2} redis-cli ping && echo "‚úÖ Redis 2 OK" || echo "‚ùå Redis 2 falhou"
                            
                            echo "üîç Teste 7: MongoDB Container"
                            docker exec ${MONGODB_CONTAINER} mongosh --eval "db.adminCommand('ping')" && echo "‚úÖ MongoDB OK" || echo "‚ùå MongoDB falhou"
                            
                            echo "üîç Teste 8: Traefik Container"
                            docker exec ${TRAEFIK_CONTAINER} traefik version && echo "‚úÖ Traefik OK" || echo "‚ùå Traefik falhou"
                            
                            echo "üîç Teste 9: Portainer Container"
                            docker ps | grep ${PORTAINER_CONTAINER} && echo "‚úÖ Portainer OK" || echo "‚ùå Portainer falhou"
                            
                            echo "üîç Teste 10: pgAdmin Container"
                            docker ps | grep ${PGADMIN_CONTAINER} && echo "‚úÖ pgAdmin OK" || echo "‚ùå pgAdmin falhou"
                            
                            echo "üîç Teste 11: PM2"
                            pm2 --version && echo "‚úÖ PM2 OK" || echo "‚ùå PM2 falhou"
                            
                            echo "üîç Teste 12: Git"
                            git --version && echo "‚úÖ Git OK" || echo "‚ùå Git falhou"
                            
                            echo "üîç Teste 13: Nginx"
                            nginx -v && echo "‚úÖ Nginx OK" || echo "‚ùå Nginx falhou"
                        '''
                    '''
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo 'üèÅ Setup da VM finalizado!'
                echo "üìä Resumo do ambiente configurado:"
                echo "   üñ•Ô∏è  VM: ${VM_HOST}"
                echo "   üë§ Usu√°rio: ${VM_USER}"
                echo "   üì¶ Node.js: ${NODE_VERSION}"
                echo "   üê≥ Docker: ${DOCKER_VERSION}"
                echo "   üóÑÔ∏è  PostgreSQL: ${POSTGRES_VERSION}"
                echo "   üî¥ Redis: ${REDIS_VERSION} (2 inst√¢ncias)"
                echo "   üçÉ MongoDB: ${MONGODB_VERSION}"
                echo "   üåê Traefik: ${TRAEFIK_VERSION}"
                echo "   üê≥ Portainer: ${PORTAINER_VERSION}"
                echo "   üìä pgAdmin: ${PGADMIN_VERSION}"
            }
        }
        success {
            script {
                echo 'üéâ Setup da VM realizado com sucesso!'
                sh '''
                    ssh -i ${SSH_KEY_PATH} ${VM_USER}@${VM_HOST} '''
                        echo "=========================================="
                        echo "üéØ INFRAESTRUTURA CONFIGURADA COM SUCESSO"
                        echo "üñ•Ô∏è  VM: ${VM_HOST}"
                        echo "üì¶ Node.js: \$(node --version)"
                        echo "üê≥ Docker: \$(docker --version)"
                        echo "üåê Traefik: https://${TRAEFIK_DOMAIN}"
                        echo "üê≥ Portainer: https://${PORTAINER_DOMAIN}"
                        echo "üìä pgAdmin: https://${PGADMIN_DOMAIN}"
                        echo "üóÑÔ∏è  PostgreSQL: Rodando na porta ${POSTGRES_PORT}"
                        echo "üî¥ Redis 1: Rodando na porta ${REDIS_PORT_1} (cache tempor√°rio)"
                        echo "üî¥ Redis 2: Rodando na porta ${REDIS_PORT_2} (com persist√™ncia)"
                        echo "üçÉ MongoDB: Rodando na porta ${MONGODB_PORT}"
                        echo "üìä pgAdmin: Rodando na porta ${PGADMIN_PORT}"
                        echo "üõ†Ô∏è  Ferramentas: PM2, Git, Nginx, etc."
                        echo "üî• Firewall: Configurado e ativo"
                        echo "üåê Docker Network: ${DOCKER_NETWORK}"
                        echo ""
                        echo "üîê CREDENCIAIS:"
                        echo "   Portainer: admin / ${PORTAINER_PASSWORD}"
                        echo "   pgAdmin: ${PGADMIN_EMAIL} / ${PGADMIN_PASSWORD}"
                        echo "   PostgreSQL: postgres / ${POSTGRES_PASSWORD}"
                        echo "   MongoDB: admin / ${MONGODB_PASSWORD}"
                        echo "=========================================="
                    '''
                '''
            }
        }
        failure {
            script {
                echo '‚ùå Setup da VM falhou!'
                echo 'üîç Verifique os logs para identificar o problema'
                
                // Tenta coletar informa√ß√µes de debug
                sh '''
                    ssh -i ${SSH_KEY_PATH} ${VM_USER}@${VM_HOST} '''
                        echo "=========================================="
                        echo "‚ùå SETUP FALHOU - DEBUG INFO"
                        echo "üñ•Ô∏è  Sistema: \$(uname -a)"
                        echo "üíæ Mem√≥ria: \$(free -h)"
                        echo "üíø Disco: \$(df -h)"
                        echo "üåê Rede: \$(ip addr show)"
                        echo "üê≥ Containers:"
                        docker ps -a
                        echo "=========================================="
                    '''
                '''
            }
        }
        cleanup {
            echo 'üßπ Limpeza final...'
        }
    }
} 