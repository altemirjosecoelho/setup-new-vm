pipeline {
    agent {
        label 'Jenkins-Testes-agent'
    }
    
    environment {
        VM_HOST = '192.168.1.100'  // IP da VM
        VM_USER = 'jenkins'        // Usu√°rio SSH
        SSH_KEY_PATH = '/var/lib/jenkins/.ssh/id_rsa'
        
        // Configura√ß√µes de instala√ß√£o
        NODE_VERSION = '18.x'
        DOCKER_VERSION = 'latest'
        POSTGRES_VERSION = '15'
        REDIS_VERSION = '7'
        
        // Configura√ß√µes de containers
        POSTGRES_CONTAINER = 'postgres-app'
        REDIS_CONTAINER = 'redis-app'
        POSTGRES_PORT = '5432'
        REDIS_PORT = '6379'
        POSTGRES_PASSWORD = 'postgres123'
        POSTGRES_DB = 'appdb'
    }
    
    stages {
        stage('Verificar Conectividade') {
            steps {
                script {
                    echo 'üîç Verificando conectividade com a VM...'
                    sh '''
                        # Testa conectividade SSH
                        ssh -i ${SSH_KEY_PATH} -o StrictHostKeyChecking=no ${VM_USER}@${VM_HOST} 'echo "‚úÖ Conex√£o SSH estabelecida"'
                        
                        # Verifica informa√ß√µes b√°sicas da VM
                        ssh -i ${SSH_KEY_PATH} ${VM_USER}@${VM_HOST} '''
                            echo "üñ•Ô∏è  Sistema: $(uname -a)"
                            echo "üíæ Mem√≥ria: $(free -h)"
                            echo "üíø Disco: $(df -h)"
                            echo "üåê IP: $(hostname -I)"
                        '''
                    '''
                }
            }
        }
        
        stage('Verificar Depend√™ncias Existentes') {
            steps {
                script {
                    echo 'üîç Verificando depend√™ncias j√° instaladas...'
                    sh '''
                        ssh -i ${SSH_KEY_PATH} ${VM_USER}@${VM_HOST} '''
                            echo "üì¶ Verificando Node.js..."
                            if command -v node &> /dev/null; then
                                echo "‚úÖ Node.js encontrado: $(node --version)"
                            else
                                echo "‚ùå Node.js n√£o encontrado"
                            fi
                            
                            echo "üê≥ Verificando Docker..."
                            if command -v docker &> /dev/null; then
                                echo "‚úÖ Docker encontrado: $(docker --version)"
                            else
                                echo "‚ùå Docker n√£o encontrado"
                            fi
                            
                            echo "üì¶ Verificando NPM..."
                            if command -v npm &> /dev/null; then
                                echo "‚úÖ NPM encontrado: $(npm --version)"
                            else
                                echo "‚ùå NPM n√£o encontrado"
                            fi
                            
                            echo "üîß Verificando Git..."
                            if command -v git &> /dev/null; then
                                echo "‚úÖ Git encontrado: $(git --version)"
                            else
                                echo "‚ùå Git n√£o encontrado"
                            fi
                        '''
                    '''
                }
            }
        }
        
        stage('Instalar Node.js') {
            when {
                expression {
                    // S√≥ executa se Node.js n√£o estiver instalado
                    return true // Sempre executa para garantir vers√£o correta
                }
            }
            steps {
                script {
                    echo 'üì¶ Instalando/Atualizando Node.js...'
                    sh '''
                        ssh -i ${SSH_KEY_PATH} ${VM_USER}@${VM_HOST} '''
                            # Atualiza reposit√≥rios
                            sudo apt-get update
                            
                            # Remove vers√µes antigas do Node.js
                            sudo apt-get remove -y nodejs npm || true
                            
                            # Instala Node.js via NodeSource
                            curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION} | sudo -E bash -
                            sudo apt-get install -y nodejs
                            
                            # Verifica instala√ß√£o
                            echo "‚úÖ Node.js instalado: $(node --version)"
                            echo "‚úÖ NPM instalado: $(npm --version)"
                            
                            # Instala PM2 para gerenciamento de processos
                            sudo npm install -g pm2
                            echo "‚úÖ PM2 instalado: $(pm2 --version)"
                        '''
                    '''
                }
            }
        }
        
        stage('Instalar Docker') {
            when {
                expression {
                    return true // Sempre executa para garantir vers√£o correta
                }
            }
            steps {
                script {
                    echo 'üê≥ Instalando/Atualizando Docker...'
                    sh '''
                        ssh -i ${SSH_KEY_PATH} ${VM_USER}@${VM_HOST} '''
                            # Remove vers√µes antigas
                            sudo apt-get remove -y docker docker-engine docker.io containerd runc || true
                            
                            # Instala depend√™ncias
                            sudo apt-get update
                            sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
                            
                            # Adiciona reposit√≥rio oficial do Docker
                            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                            echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                            
                            # Instala Docker
                            sudo apt-get update
                            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
                            
                            # Adiciona usu√°rio ao grupo docker
                            sudo usermod -aG docker ${USER}
                            
                            # Inicia e habilita Docker
                            sudo systemctl start docker
                            sudo systemctl enable docker
                            
                            # Verifica instala√ß√£o
                            echo "‚úÖ Docker instalado: $(docker --version)"
                            echo "‚úÖ Docker Compose instalado: $(docker compose version)"
                        '''
                    '''
                }
            }
        }
        
        stage('Configurar Containers de Banco') {
            steps {
                script {
                    echo 'üóÑÔ∏è Configurando containers de banco de dados...'
                    sh '''
                        ssh -i ${SSH_KEY_PATH} ${VM_USER}@${VM_HOST} '''
                            # Para containers existentes
                            docker stop ${POSTGRES_CONTAINER} ${REDIS_CONTAINER} || true
                            docker rm ${POSTGRES_CONTAINER} ${REDIS_CONTAINER} || true
                            
                            # Cria rede para containers
                            docker network create app-network || true
                            
                            # Executa PostgreSQL
                            docker run -d \\
                                --name ${POSTGRES_CONTAINER} \\
                                --network app-network \\
                                -e POSTGRES_PASSWORD=${POSTGRES_PASSWORD} \\
                                -e POSTGRES_DB=${POSTGRES_DB} \\
                                -p ${POSTGRES_PORT}:5432 \\
                                -v postgres_data:/var/lib/postgresql/data \\
                                postgres:${POSTGRES_VERSION}
                            
                            # Executa Redis
                            docker run -d \\
                                --name ${REDIS_CONTAINER} \\
                                --network app-network \\
                                -p ${REDIS_PORT}:6379 \\
                                -v redis_data:/data \\
                                redis:${REDIS_VERSION}
                            
                            # Aguarda inicializa√ß√£o
                            sleep 10
                            
                            # Verifica se containers est√£o rodando
                            echo "üìä Status dos containers:"
                            docker ps --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}"
                            
                            # Testa conex√£o com PostgreSQL
                            echo "üîç Testando PostgreSQL..."
                            docker exec ${POSTGRES_CONTAINER} pg_isready -U postgres && echo "‚úÖ PostgreSQL OK" || echo "‚ùå PostgreSQL falhou"
                            
                            # Testa conex√£o com Redis
                            echo "üîç Testando Redis..."
                            docker exec ${REDIS_CONTAINER} redis-cli ping && echo "‚úÖ Redis OK" || echo "‚ùå Redis falhou"
                        '''
                    '''
                }
            }
        }
        
        stage('Instalar Ferramentas Adicionais') {
            steps {
                script {
                    echo 'üõ†Ô∏è Instalando ferramentas adicionais...'
                    sh '''
                        ssh -i ${SSH_KEY_PATH} ${VM_USER}@${VM_HOST} '''
                            # Atualiza reposit√≥rios
                            sudo apt-get update
                            
                            # Instala ferramentas √∫teis
                            sudo apt-get install -y \\
                                htop \\
                                tree \\
                                jq \\
                                curl \\
                                wget \\
                                unzip \\
                                git \\
                                vim \\
                                net-tools \\
                                nginx
                            
                            # Instala ferramentas de monitoramento
                            sudo npm install -g \\
                                nodemon \\
                                concurrently \\
                                cross-env
                            
                            echo "‚úÖ Ferramentas adicionais instaladas"
                        '''
                    '''
                }
            }
        }
        
        stage('Configurar Firewall') {
            steps {
                script {
                    echo 'üî• Configurando firewall...'
                    sh '''
                        ssh -i ${SSH_KEY_PATH} ${VM_USER}@${VM_HOST} '''
                            # Instala UFW se n√£o estiver instalado
                            sudo apt-get install -y ufw
                            
                            # Configura regras b√°sicas
                            sudo ufw --force reset
                            sudo ufw default deny incoming
                            sudo ufw default allow outgoing
                            
                            # Permite SSH
                            sudo ufw allow ssh
                            
                            # Permite portas da aplica√ß√£o
                            sudo ufw allow 80/tcp   # HTTP
                            sudo ufw allow 443/tcp  # HTTPS
                            sudo ufw allow 3000/tcp # Node.js app
                            sudo ufw allow 8080/tcp # Jenkins
                            
                            # Habilita firewall
                            sudo ufw --force enable
                            
                            echo "‚úÖ Firewall configurado"
                            sudo ufw status
                        '''
                    '''
                }
            }
        }
        
        stage('Teste Final do Ambiente') {
            steps {
                script {
                    echo 'üß™ Executando testes finais do ambiente...'
                    sh '''
                        ssh -i ${SSH_KEY_PATH} ${VM_USER}@${VM_HOST} '''
                            echo "üîç Teste 1: Node.js"
                            node --version && echo "‚úÖ Node.js OK" || echo "‚ùå Node.js falhou"
                            
                            echo "üîç Teste 2: NPM"
                            npm --version && echo "‚úÖ NPM OK" || echo "‚ùå NPM falhou"
                            
                            echo "üîç Teste 3: Docker"
                            docker --version && echo "‚úÖ Docker OK" || echo "‚ùå Docker falhou"
                            
                            echo "üîç Teste 4: PostgreSQL Container"
                            docker exec ${POSTGRES_CONTAINER} pg_isready -U postgres && echo "‚úÖ PostgreSQL OK" || echo "‚ùå PostgreSQL falhou"
                            
                            echo "üîç Teste 5: Redis Container"
                            docker exec ${REDIS_CONTAINER} redis-cli ping && echo "‚úÖ Redis OK" || echo "‚ùå Redis falhou"
                            
                            echo "üîç Teste 6: PM2"
                            pm2 --version && echo "‚úÖ PM2 OK" || echo "‚ùå PM2 falhou"
                            
                            echo "üîç Teste 7: Git"
                            git --version && echo "‚úÖ Git OK" || echo "‚ùå Git falhou"
                            
                            echo "üîç Teste 8: Nginx"
                            nginx -v && echo "‚úÖ Nginx OK" || echo "‚ùå Nginx falhou"
                        '''
                    '''
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo 'üèÅ Setup da VM finalizado!'
                echo "üìä Resumo do ambiente configurado:"
                echo "   üñ•Ô∏è  VM: ${VM_HOST}"
                echo "   üë§ Usu√°rio: ${VM_USER}"
                echo "   üì¶ Node.js: ${NODE_VERSION}"
                echo "   üê≥ Docker: ${DOCKER_VERSION}"
                echo "   üóÑÔ∏è  PostgreSQL: ${POSTGRES_VERSION}"
                echo "   üî¥ Redis: ${REDIS_VERSION}"
            }
        }
        success {
            script {
                echo 'üéâ Setup da VM realizado com sucesso!'
                sh '''
                    ssh -i ${SSH_KEY_PATH} ${VM_USER}@${VM_HOST} '''
                        echo "=========================================="
                        echo "üéØ AMBIENTE CONFIGURADO COM SUCESSO"
                        echo "üñ•Ô∏è  VM: ${VM_HOST}"
                        echo "üì¶ Node.js: $(node --version)"
                        echo "üê≥ Docker: $(docker --version)"
                        echo "üóÑÔ∏è  PostgreSQL: Rodando na porta ${POSTGRES_PORT}"
                        echo "üî¥ Redis: Rodando na porta ${REDIS_PORT}"
                        echo "üõ†Ô∏è  Ferramentas: PM2, Git, Nginx, etc."
                        echo "üî• Firewall: Configurado e ativo"
                        echo "=========================================="
                    '''
                '''
            }
        }
        failure {
            script {
                echo '‚ùå Setup da VM falhou!'
                echo 'üîç Verifique os logs para identificar o problema'
                
                // Tenta coletar informa√ß√µes de debug
                sh '''
                    ssh -i ${SSH_KEY_PATH} ${VM_USER}@${VM_HOST} '''
                        echo "=========================================="
                        echo "‚ùå SETUP FALHOU - DEBUG INFO"
                        echo "üñ•Ô∏è  Sistema: $(uname -a)"
                        echo "üíæ Mem√≥ria: $(free -h)"
                        echo "üíø Disco: $(df -h)"
                        echo "üåê Rede: $(ip addr show)"
                        echo "=========================================="
                    '''
                '''
            }
        }
        cleanup {
            echo 'üßπ Limpeza final...'
        }
    }
} 