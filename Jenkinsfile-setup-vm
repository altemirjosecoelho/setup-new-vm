pipeline {
    agent {
        label 'local-agent'
    }
    
    environment {
        // Configura√ß√µes de conex√£o SSH
        VM_HOST = '135.181.24.29'
        VM_USER = 'ubuntu'  // ou o usu√°rio que voc√™ usa na VM
        VM_PASSWORD = 'sua_senha_aqui'  // configure no Jenkins como vari√°vel de ambiente
        
        // Configura√ß√µes de instala√ß√£o
        NODE_VERSION = '21.x'
        DOCKER_VERSION = 'latest'
        POSTGRES_VERSION = '15'
        REDIS_VERSION = '7'
        MONGODB_VERSION = '7'
        TRAEFIK_VERSION = 'latest'
        PORTAINER_VERSION = 'latest'
        PGADMIN_VERSION = 'latest'
    }
    
    stages {
        stage('Configurar Credenciais') {
            steps {
                script {
                    // Configura√ß√µes de conex√£o SSH
                    env.VM_HOST = env.VM_HOST ?: '135.181.24.29'
                    env.VM_USER = env.VM_USER ?: 'root'
                    env.VM_PASSWORD = env.VM_PASSWORD ?: 'zx100mil!'
                    
                    echo 'üîê Credenciais configuradas'
                    echo "üñ•Ô∏è  VM: ${env.VM_HOST}"
                    echo "üë§ Usu√°rio: ${env.VM_USER}"
                }
            }
        }
        

        
        stage('Setup da VM') {
            steps {
                script {
                    echo 'üöÄ Executando setup da VM...'
                    
                    // Executar todos os comandos em uma √∫nica conex√£o SSH
                    sh '''
                        sshpass -p "${VM_PASSWORD}" ssh -o StrictHostKeyChecking=no "${VM_USER}@${VM_HOST}" '
                            echo "üöÄ Iniciando setup da VM..."
                            
                            # Atualizar sistema
                            echo "üì¶ Atualizando sistema..."
                            apt-get update
                            apt-get upgrade -y
                            
                            # Instalar depend√™ncias b√°sicas
                            echo "üîß Instalando depend√™ncias b√°sicas..."
                            apt-get install -y curl wget git vim htop tree jq unzip net-tools nginx certbot python3-certbot-nginx
                            
                            # Instalar Node.js
                            echo "üì¶ Instalando Node.js..."
                            curl -fsSL https://deb.nodesource.com/setup_21.x | bash -
                            apt-get install -y nodejs
                            
                            # Instalar PM2
                            echo "‚ö° Instalando PM2..."
                            npm install -g pm2 nodemon concurrently cross-env
                            
                            # Instalar Docker
                            echo "üê≥ Instalando Docker..."
                            apt-get remove -y docker docker-engine docker.io containerd runc || true
                            apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
                            
                            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                            echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
                            
                            apt-get update
                            apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
                            
                            # Iniciar e habilitar Docker
                            systemctl start docker
                            systemctl enable docker
                            
                            # Criar diret√≥rios para volumes
                            echo "üìÅ Criando diret√≥rios para volumes..."
                            mkdir -p /opt/docker/volumes/{postgres,redis-6380,mongodb,traefik,portainer,pgadmin}
                            chown -R 1000:1000 /opt/docker/volumes/
                            
                            # Parar e remover containers existentes
                            echo "üßπ Limpando containers existentes..."
                            docker stop traefik portainer postgres-app redis-app-6379 redis-app-6380 mongodb-app pgadmin 2>/dev/null || true
                            docker rm traefik portainer postgres-app redis-app-6379 redis-app-6380 mongodb-app pgadmin 2>/dev/null || true
                            
                            # Criar rede Docker
                            docker network create traefik_network 2>/dev/null || true
                            
                            # Executar Traefik
                            echo "üåê Iniciando Traefik..."
                            docker run -d \
                                --name traefik \
                                --network traefik_network \
                                -p 80:80 \
                                -p 443:443 \
                                -v /var/run/docker.sock:/var/run/docker.sock:ro \
                                -v /opt/docker/volumes/traefik:/etc/traefik \
                                -l traefik.enable=true \
                                -l traefik.http.routers.traefik.rule="Host(traefik.testes.possoatender.com)" \
                                -l traefik.http.routers.traefik.entrypoints=web \
                                -l traefik.http.services.traefik.loadbalancer.server.port=8080 \
                                traefik:latest \
                                --api.dashboard=true \
                                --api.insecure=true \
                                --providers.docker=true \
                                --providers.docker.exposedbydefault=false \
                                --entrypoints.web.address=:80 \
                                --entrypoints.websecure.address=:443
                            
                            # Executar PostgreSQL
                            echo "üóÑÔ∏è Iniciando PostgreSQL..."
                            docker run -d \
                                --name postgres-app \
                                --network traefik_network \
                                -e POSTGRES_PASSWORD=postgres123 \
                                -e POSTGRES_DB=appdb \
                                -p 5432:5432 \
                                -v /opt/docker/volumes/postgres:/var/lib/postgresql/data \
                                postgres:15
                            
                            # Executar Redis 1 (sem persist√™ncia)
                            echo "üî¥ Iniciando Redis 1 (6379) - sem persist√™ncia..."
                            docker run -d \
                                --name redis-app-6379 \
                                --network traefik_network \
                                -p 6379:6379 \
                                redis:7 \
                                redis-server --save "" --appendonly no
                            
                            # Executar Redis 2 (com persist√™ncia)
                            echo "üî¥ Iniciando Redis 2 (6380) - com persist√™ncia..."
                            docker run -d \
                                --name redis-app-6380 \
                                --network traefik_network \
                                -p 6380:6379 \
                                -v /opt/docker/volumes/redis-6380:/data \
                                redis:7 \
                                redis-server --appendonly yes
                            
                            # Executar MongoDB
                            echo "üçÉ Iniciando MongoDB..."
                            docker run -d \
                                --name mongodb-app \
                                --network traefik_network \
                                -e MONGO_INITDB_ROOT_USERNAME=admin \
                                -e MONGO_INITDB_ROOT_PASSWORD=mongo123 \
                                -e MONGO_INITDB_DATABASE=appdb \
                                -p 27017:27017 \
                                -v /opt/docker/volumes/mongodb:/data/db \
                                mongo:7
                            
                            # Executar Portainer
                            echo "üê≥ Iniciando Portainer..."
                            docker run -d \
                                --name portainer \
                                --network traefik_network \
                                -p 9000:9000 \
                                -v /var/run/docker.sock:/var/run/docker.sock:ro \
                                -v /opt/docker/volumes/portainer:/data \
                                -l traefik.enable=true \
                                -l traefik.http.routers.portainer.rule="Host(portainer.testes.possoatender.com)" \
                                -l traefik.http.routers.portainer.entrypoints=web \
                                -l traefik.http.services.portainer.loadbalancer.server.port=9000 \
                                portainer/portainer-ce:latest
                            
                            # Executar pgAdmin
                            echo "üìä Iniciando pgAdmin..."
                            docker run -d \
                                --name pgadmin \
                                --network traefik_network \
                                -e PGADMIN_DEFAULT_EMAIL=admin@admin.com \
                                -e PGADMIN_DEFAULT_PASSWORD=admin123 \
                                -p 5050:80 \
                                -v /opt/docker/volumes/pgadmin:/var/lib/pgadmin \
                                -l traefik.enable=true \
                                -l traefik.http.routers.pgadmin.rule="Host(pgadmin.testes.possoatender.com)" \
                                -l traefik.http.routers.pgadmin.entrypoints=web \
                                -l traefik.http.services.pgadmin.loadbalancer.server.port=80 \
                                dpage/pgadmin4:latest
                            
                            # Aguardar inicializa√ß√£o
                            echo "‚è≥ Aguardando inicializa√ß√£o dos containers..."
                            sleep 30
                            
                            # Configurar firewall
                            echo "üî• Configurando firewall..."
                            apt-get install -y ufw
                            ufw --force reset
                            ufw default deny incoming
                            ufw default allow outgoing
                            ufw allow ssh
                            ufw allow 80/tcp
                            ufw allow 443/tcp
                            ufw allow 3000/tcp
                            ufw allow 8080/tcp
                            ufw allow 9000/tcp
                            ufw allow 5050/tcp
                            ufw --force enable
                            
                            # Testes finais
                            echo "üß™ Executando testes finais..."
                            
                            echo "üîç Teste 1: Node.js"
                            node --version && echo "‚úÖ Node.js OK" || echo "‚ùå Node.js falhou"
                            
                            echo "üîç Teste 2: Docker"
                            docker --version && echo "‚úÖ Docker OK" || echo "‚ùå Docker falhou"
                            
                            echo "üîç Teste 3: PostgreSQL"
                            docker exec postgres-app pg_isready -U postgres && echo "‚úÖ PostgreSQL OK" || echo "‚ùå PostgreSQL falhou"
                            
                            echo "üîç Teste 4: Redis 1"
                            docker exec redis-app-6379 redis-cli ping && echo "‚úÖ Redis 1 OK" || echo "‚ùå Redis 1 falhou"
                            
                            echo "üîç Teste 5: Redis 2"
                            docker exec redis-app-6380 redis-cli ping && echo "‚úÖ Redis 2 OK" || echo "‚ùå Redis 2 falhou"
                            
                            echo "üîç Teste 6: MongoDB"
                            docker exec mongodb-app mongosh --eval "db.adminCommand(\"ping\")" && echo "‚úÖ MongoDB OK" || echo "‚ùå MongoDB falhou"
                            
                            echo "üîç Teste 7: PM2"
                            pm2 --version && echo "‚úÖ PM2 OK" || echo "‚ùå PM2 falhou"
                            
                            # Status dos containers
                            echo "üìä Status dos containers:"
                            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
                            
                            # Resumo final
                            echo "üéâ Setup conclu√≠do com sucesso!"
                            echo "=========================================="
                            echo "üéØ INFRAESTRUTURA CONFIGURADA COM SUCESSO"
                            echo "üñ•Ô∏è  Sistema: $(uname -a)"
                            echo "üì¶ Node.js: $(node --version)"
                            echo "üê≥ Docker: $(docker --version)"
                            echo "üåê Traefik: https://traefik.testes.possoatender.com"
                            echo "üê≥ Portainer: https://portainer.testes.possoatender.com"
                            echo "üìä pgAdmin: https://pgadmin.testes.possoatender.com"
                            echo "üóÑÔ∏è  PostgreSQL: Rodando na porta 5432"
                            echo "üî¥ Redis 1: Rodando na porta 6379 (cache tempor√°rio)"
                            echo "üî¥ Redis 2: Rodando na porta 6380 (com persist√™ncia)"
                            echo "üçÉ MongoDB: Rodando na porta 27017"
                            echo "üõ†Ô∏è  Ferramentas: PM2, Git, Nginx, etc."
                            echo "üî• Firewall: Configurado e ativo"
                            echo ""
                            echo "üîê CREDENCIAIS:"
                            echo "   Portainer: admin / my_password"
                            echo "   pgAdmin: admin@admin.com / admin123"
                            echo "   PostgreSQL: postgres / postgres123"
                            echo "   MongoDB: admin / mongo123"
                            echo "=========================================="
                        '
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo 'üèÅ Setup da VM finalizado!'
        }
        success {
            echo 'üéâ Setup da VM realizado com sucesso!'
        }
        failure {
            echo '‚ùå Setup da VM falhou!'
            echo 'üîç Verifique os logs para identificar o problema'
        }
    }
} 