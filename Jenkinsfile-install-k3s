pipeline {
    agent any
    
    environment {
        // Definir vari√°veis de ambiente se necess√°rio
        K3S_VERSION = 'v1.33.3+k3s1'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Fazendo checkout do c√≥digo...'
                checkout scm
            }
        }
        
        stage('Verificar Sistema') {
            steps {
                echo 'Verificando requisitos do sistema...'
                script {
                    // Verificar se estamos em um sistema Linux
                    def os = sh(script: 'uname -s', returnStdout: true).trim()
                    if (os != 'Linux') {
                        error "Este pipeline √© compat√≠vel apenas com sistemas Linux. Sistema detectado: ${os}"
                    }
                    
                    // Verificar arquitetura
                    def arch = sh(script: 'uname -m', returnStdout: true).trim()
                    echo "Arquitetura detectada: ${arch}"
                    
                    // Verificar se estamos rodando como root ou com sudo
                    def user = sh(script: 'whoami', returnStdout: true).trim()
                    echo "Usu√°rio atual: ${user}"
                    
                    if (user != 'root') {
                        echo "Aviso: Executando como usu√°rio n√£o-root. Pode ser necess√°rio sudo para algumas opera√ß√µes."
                    }
                    
                    // Verificar se o usu√°rio deploy existe
                    echo "Verificando se o usu√°rio 'deploy' existe..."
                    def deployUserExists = sh(
                        script: 'id deploy',
                        returnStatus: true
                    ) == 0
                    
                    if (!deployUserExists) {
                        error "‚ùå Usu√°rio 'deploy' n√£o encontrado! Execute primeiro: adduser deploy && usermod -aG sudo deploy"
                    } else {
                        echo "‚úÖ Usu√°rio 'deploy' encontrado!"
                        
                        // Verificar se o usu√°rio deploy est√° no grupo sudo
                        def isInSudoGroup = sh(
                            script: 'groups deploy | grep -q sudo',
                            returnStatus: true
                        ) == 0
                        
                        if (!isInSudoGroup) {
                            echo "‚ö†Ô∏è  Usu√°rio 'deploy' n√£o est√° no grupo sudo. Adicionando..."
                            sh 'usermod -aG sudo deploy'
                            echo "‚úÖ Usu√°rio 'deploy' adicionado ao grupo sudo!"
                        } else {
                            echo "‚úÖ Usu√°rio 'deploy' j√° possui privil√©gios de sudo!"
                        }
                        
                        // Verificar se o usu√°rio deploy est√° no grupo docker (se existir)
                        def dockerGroupExists = sh(
                            script: 'getent group docker',
                            returnStatus: true
                        ) == 0
                        
                        if (dockerGroupExists) {
                            def isInDockerGroup = sh(
                                script: 'groups deploy | grep -q docker',
                                returnStatus: true
                            ) == 0
                            
                            if (!isInDockerGroup) {
                                echo "üê≥ Adicionando usu√°rio 'deploy' ao grupo 'docker'..."
                                sh 'usermod -aG docker deploy'
                                echo "‚úÖ Usu√°rio 'deploy' adicionado ao grupo 'docker'!"
                            } else {
                                echo "‚úÖ Usu√°rio 'deploy' j√° est√° no grupo 'docker'!"
                            }
                        }
                    }
                }
            }
        }
        
        stage('Instalar K3s') {
            steps {
                echo 'Iniciando instala√ß√£o do K3s...'
                script {
                    // Verificar se estamos em um container
                    def isContainer = sh(
                        script: 'cat /proc/1/cgroup | grep -q docker',
                        returnStatus: true
                    ) == 0
                    
                    if (isContainer) {
                        echo "‚ö†Ô∏è  Detectado ambiente containerizado. Ajustando instala√ß√£o..."
                        
                        // Tornar o script execut√°vel
                        sh 'chmod +x scripts/install-k3s-cluster.sh'
                        
                        // Executar o script diretamente (sem sudo -u deploy)
                        echo "Executando instala√ß√£o do K3s no container..."
                        sh './scripts/install-k3s-cluster.sh'
                        
                        // Ap√≥s a instala√ß√£o, ajustar permiss√µes para o usu√°rio deploy
                        echo "Ajustando permiss√µes para o usu√°rio deploy..."
                        sh '''
                            # Copiar configura√ß√£o do K3s para o usu√°rio deploy
                            if [ -f /etc/rancher/k3s/k3s.yaml ]; then
                                mkdir -p /home/deploy/.kube
                                cp /etc/rancher/k3s/k3s.yaml /home/deploy/.kube/config
                                chown -R deploy:deploy /home/deploy/.kube
                                chmod 600 /home/deploy/.kube/config
                                echo "‚úÖ Configura√ß√£o do K3s copiada para /home/deploy/.kube/config"
                            fi
                        '''
                    } else {
                        // Tornar o script execut√°vel
                        sh 'chmod +x scripts/install-k3s-cluster.sh'
                        
                        // Executar o script de instala√ß√£o como usu√°rio deploy
                        echo "Executando instala√ß√£o do K3s como usu√°rio 'deploy'..."
                        sh 'sudo -u deploy ./scripts/install-k3s-cluster.sh'
                    }
                    
                    echo "‚úÖ Instala√ß√£o do K3s conclu√≠da!"
                }
            }
        }
        
        stage('Verificar Instala√ß√£o') {
            steps {
                echo 'Verificando se o K3s foi instalado corretamente...'
                script {
                    // Verificar se estamos em um container
                    def isContainer = sh(
                        script: 'cat /proc/1/cgroup | grep -q docker',
                        returnStatus: true
                    ) == 0
                    
                    // Aguardar um pouco para garantir que tudo est√° funcionando
                    sleep 10
                    
                    if (isContainer) {
                        echo "Verificando K3s em ambiente containerizado..."
                        
                        // Verificar se o K3s est√° rodando (sem systemctl em container)
                        def k3sRunning = sh(
                            script: 'ps aux | grep -v grep | grep -q k3s',
                            returnStatus: true
                        ) == 0
                        
                        if (!k3sRunning) {
                            error "K3s n√£o est√° rodando no container"
                        }
                        
                        echo "‚úÖ K3s est√° rodando no container"
                        
                        // Verificar se kubectl est√° funcionando
                        echo "Verificando kubectl..."
                        sh 'kubectl version --client'
                        
                        // Verificar nodes do cluster
                        sh 'kubectl get nodes'
                        
                        // Verificar se o hello world foi deployado
                        sh 'kubectl get pods -n hello-world'
                        sh 'kubectl get services -n hello-world'
                        
                        // Verificar se o usu√°rio deploy pode acessar
                        echo "Verificando acesso do usu√°rio deploy..."
                        sh 'sudo -u deploy kubectl get nodes 2>/dev/null || echo "‚ö†Ô∏è Usu√°rio deploy n√£o consegue acessar kubectl diretamente"'
                        
                    } else {
                        // Verificar se o K3s est√° rodando
                        def k3sStatus = sh(script: 'sudo systemctl is-active k3s', returnStdout: true).trim()
                        if (k3sStatus != 'active') {
                            error "K3s n√£o est√° rodando. Status: ${k3sStatus}"
                        }
                        
                        echo "K3s est√° rodando com status: ${k3sStatus}"
                        
                        // Verificar se kubectl est√° funcionando como usu√°rio deploy
                        echo "Verificando kubectl como usu√°rio 'deploy'..."
                        sh 'sudo -u deploy kubectl version --client'
                        
                        // Verificar nodes do cluster como usu√°rio deploy
                        sh 'sudo -u deploy kubectl get nodes'
                        
                        // Verificar se o hello world foi deployado como usu√°rio deploy
                        sh 'sudo -u deploy kubectl get pods -n hello-world'
                        sh 'sudo -u deploy kubectl get services -n hello-world'
                    }
                }
            }
        }
        
        stage('Testar Acesso') {
            steps {
                echo 'Testando acesso ao hello world...'
                script {
                    // Verificar se estamos em um container
                    def isContainer = sh(
                        script: 'cat /proc/1/cgroup | grep -q docker',
                        returnStatus: true
                    ) == 0
                    
                    // Obter IP do node
                    def nodeIP = ""
                    if (isContainer) {
                        nodeIP = sh(script: 'kubectl get nodes -o jsonpath=\'{.items[0].status.addresses[?(@.type=="InternalIP")].address}\'', returnStdout: true).trim()
                    } else {
                        nodeIP = sh(script: 'sudo -u deploy kubectl get nodes -o jsonpath=\'{.items[0].status.addresses[?(@.type=="InternalIP")].address}\'', returnStdout: true).trim()
                    }
                    
                    if (nodeIP) {
                        echo "IP do node: ${nodeIP}"
                        echo "URL de acesso: http://${nodeIP}:30080"
                        
                        // Testar conectividade (opcional)
                        try {
                            def response = sh(script: "curl -s -o /dev/null -w '%{http_code}' http://${nodeIP}:30080", returnStdout: true).trim()
                            echo "Resposta do hello world: ${response}"
                            
                            if (response == '200') {
                                echo "‚úÖ Hello world est√° acess√≠vel!"
                            } else {
                                echo "‚ö†Ô∏è Hello world pode n√£o estar acess√≠vel ainda (c√≥digo: ${response})"
                            }
                        } catch (Exception e) {
                            echo "‚ö†Ô∏è N√£o foi poss√≠vel testar conectividade: ${e.getMessage()}"
                        }
                    } else {
                        echo "‚ö†Ô∏è N√£o foi poss√≠vel obter IP do node"
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline conclu√≠do!'
        }
        success {
            echo '‚úÖ Instala√ß√£o do K3s conclu√≠da com sucesso!'
            echo 'üìã Informa√ß√µes √∫teis:'
            echo '   - kubectl get nodes'
            echo '   - kubectl get pods -n hello-world'
            echo '   - kubectl get services -n hello-world'
            echo '   - http://<IP_DO_NODE>:30080 (para acessar hello world)'
        }
        failure {
            echo '‚ùå Falha na instala√ß√£o do K3s'
            echo 'üìã Para debug:'
            echo '   - sudo systemctl status k3s'
            echo '   - sudo journalctl -u k3s.service'
            echo '   - kubectl get nodes'
        }
    }
} 