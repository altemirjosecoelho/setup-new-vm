pipeline {
    agent {
        label 'jenkins-testes'
    }
    
    options {
        // Timeout para evitar builds infinitos
        timeout(time: 30, unit: 'MINUTES')
        // Desabilitar builds concorrentes
        disableConcurrentBuilds()
        // Manter apenas os últimos 5 builds
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }
    
    // Variáveis de ambiente devem ser configuradas no Jenkins:
    // TRAEFIK_SUBDOMAIN=traefik
    // DEFAULT_DOMAIN=exemplo.com
    // PORTAINER_SUBDOMAIN=portainer
    // TRAEFIK_NETWORK=traefik_network
    // ADMIN_PASSWORD=MinhaSenhaSegura123
    
    stages {
        stage('Verificar Variáveis de Ambiente') {
            steps {
                script {
                    echo "=== VERIFICANDO VARIÁVEIS DE AMBIENTE ==="
                    
                    // Verifica se as variáveis obrigatórias estão definidas
                    def missingVars = []
                    
                    // Verifica TRAEFIK_SUBDOMAIN
                    if (!env.TRAEFIK_SUBDOMAIN) {
                        missingVars.add('TRAEFIK_SUBDOMAIN')
                    } else {
                        echo "✅ TRAEFIK_SUBDOMAIN: ${env.TRAEFIK_SUBDOMAIN}"
                    }
                    
                    // Verifica DEFAULT_DOMAIN
                    if (!env.DEFAULT_DOMAIN) {
                        missingVars.add('DEFAULT_DOMAIN')
                    } else {
                        echo "✅ DEFAULT_DOMAIN: ${env.DEFAULT_DOMAIN}"
                    }
                    
                    // Verifica PORTAINER_SUBDOMAIN
                    if (!env.PORTAINER_SUBDOMAIN) {
                        missingVars.add('PORTAINER_SUBDOMAIN')
                    } else {
                        echo "✅ PORTAINER_SUBDOMAIN: ${env.PORTAINER_SUBDOMAIN}"
                    }
                    
                    // Verifica ADMIN_PASSWORD
                    if (!env.ADMIN_PASSWORD) {
                        missingVars.add('ADMIN_PASSWORD')
                    } else {
                        echo "✅ ADMIN_PASSWORD: [CONFIGURADA]"
                    }
                    
                    if (missingVars.size() > 0) {
                        error "❌ Variáveis obrigatórias não configuradas: ${missingVars.join(', ')}"
                    }
                    
                    // Define a network padrão se não estiver configurada
                    if (!env.TRAEFIK_NETWORK) {
                        env.TRAEFIK_NETWORK = 'traefik_network'
                        echo "ℹ️  TRAEFIK_NETWORK não configurada, usando padrão: traefik_network"
                    } else {
                        echo "✅ TRAEFIK_NETWORK: ${env.TRAEFIK_NETWORK}"
                    }
                    
                    // Exibe as URLs que serão configuradas
                    echo ""
                    echo "=== URLs que serão configuradas ==="
                    echo "🌐 Traefik: https://${env.TRAEFIK_SUBDOMAIN}.${env.DEFAULT_DOMAIN}"
                    echo "🐳 Portainer: https://${env.PORTAINER_SUBDOMAIN}.${env.DEFAULT_DOMAIN}"
                    echo "🌐 Network: ${env.TRAEFIK_NETWORK}"
                    echo "====================================="
                }
            }
        }
        
        stage('Verificar Repositório') {
            steps {
                script {
                    echo "Verificando repositório..."
                    
                    // Verifica se estamos no workspace correto
                    sh '''
                        echo "📁 Workspace atual: $(pwd)"
                        echo "=== ESTRUTURA DO WORKSPACE ==="
                        ls -la
                        echo "================================"
                    '''
                    
                    // Verifica se a pasta docker existe
                    sh '''
                        if [ -d "docker" ]; then
                            echo "✅ Pasta docker encontrada!"
                            cd docker
                            echo "📁 Acessando pasta: $(pwd)"
                            echo "=== CONTEÚDO DA PASTA DOCKER ==="
                            ls -la
                            echo "================================"
                        else
                            echo "❌ Pasta docker não encontrada!"
                            echo "Criando pasta docker..."
                            mkdir -p docker
                            cd docker
                            echo "✅ Pasta docker criada!"
                        fi
                    '''
                }
            }
        }
        
        stage('Criar Network Docker') {
            steps {
                script {
                    echo "Criando network Docker para Traefik..."
                    
                    // Verifica se a network já existe
                    def networkName = env.TRAEFIK_NETWORK ?: 'traefik_network'
                    def networkExists = sh(
                        script: "docker network ls --format '{{.Name}}' | grep -w '${networkName}'",
                        returnStatus: true
                    ) == 0
                    
                    if (!networkExists) {
                        sh "docker network create ${networkName}"
                        echo "✅ Network ${networkName} criada com sucesso!"
                    } else {
                        echo "ℹ️  Network ${networkName} já existe!"
                    }
                }
            }
        }
        
        stage('Verificar e Configurar Docker Compose') {
            steps {
                script {
                    echo "Verificando arquivos Docker Compose existentes..."
                    
                    // Gera hash da senha para o Traefik
                    def passwordHash = ""
                    
                    // Tenta usar htpasswd se disponível
                    def htpasswdAvailable = sh(
                        script: "which htpasswd",
                        returnStatus: true
                    ) == 0
                    
                    if (htpasswdAvailable) {
                        passwordHash = sh(
                            script: "htpasswd -nbB admin '${env.ADMIN_PASSWORD}' | cut -d ':' -f 2",
                            returnStdout: true
                        ).trim()
                        echo "✅ Hash gerado usando htpasswd"
                    } else {
                        // Instala apache2-utils se não estiver disponível
                        echo "📦 htpasswd não encontrado, instalando apache2-utils..."
                        sh "apt-get update && apt-get install -y apache2-utils"
                        
                        // Tenta gerar o hash novamente
                        def hashResult = sh(
                            script: "htpasswd -nbB admin '${env.ADMIN_PASSWORD}' | cut -d ':' -f 2",
                            returnStatus: true
                        )
                        
                        if (hashResult == 0) {
                            passwordHash = sh(
                                script: "htpasswd -nbB admin '${env.ADMIN_PASSWORD}' | cut -d ':' -f 2",
                                returnStdout: true
                            ).trim()
                            echo "✅ Hash gerado após instalação do apache2-utils"
                        } else {
                            // Fallback: usa Python para gerar hash bcrypt
                            echo "⚠️  htpasswd falhou, usando Python para gerar hash..."
                            passwordHash = sh(
                                script: "python3 -c \"import bcrypt; import sys; print(bcrypt.hashpw('${env.ADMIN_PASSWORD}'.encode('utf-8'), bcrypt.gensalt()).decode('utf-8'))\"",
                                returnStdout: true
                            ).trim()
                                                    echo "✅ Hash gerado usando Python bcrypt"
                    }
                    
                    // Verifica se o hash foi gerado corretamente
                    if (!passwordHash || passwordHash.isEmpty()) {
                        error "❌ Erro: Não foi possível gerar o hash da senha!"
                    }
                    
                    echo "✅ Hash da senha gerado com sucesso: ${passwordHash.take(20)}..."
                    }
                    
                    // Cria arquivo .env com as variáveis
                    def traefikSubdomain = env.TRAEFIK_SUBDOMAIN
                    def defaultDomain = env.DEFAULT_DOMAIN
                    def portainerSubdomain = env.PORTAINER_SUBDOMAIN
                    def traefikNetwork = env.TRAEFIK_NETWORK ?: 'traefik_network'
                    def defaultEmail = env.DEFAULT_EMAIL ?: "admin@${env.DEFAULT_DOMAIN}"
                    
                    sh """
                        cd docker
                        cat > .env << 'EOF'
TRAEFIK_SUBDOMAIN=${traefikSubdomain}
DEFAULT_DOMAIN=${defaultDomain}
PORTAINER_SUBDOMAIN=${portainerSubdomain}
ADMIN_PASSWORD_HASH=${passwordHash}
TRAEFIK_NETWORK=${traefikNetwork}
DEFAULT_EMAIL=${defaultEmail}
EOF
                    """
                    
                    echo "✅ Arquivo .env criado com as variáveis de ambiente!"
                    
                    // Verifica se o arquivo .env foi criado corretamente
                    def envFileExists = sh(
                        script: "cd docker && test -f .env",
                        returnStatus: true
                    ) == 0
                    
                    if (!envFileExists) {
                        error "❌ Erro: Arquivo .env não foi criado corretamente!"
                    }
                    
                    echo "✅ Arquivo .env verificado e existe!"
                    
                    // Lista todos os arquivos docker-compose existentes
                    sh '''
                        cd docker
                        echo "=== ARQUIVOS DOCKER COMPOSE ENCONTRADOS ==="
                        ls -la docker-compose*.yml
                        echo "=========================================="
                        
                        echo "=== CONTEÚDO DO DOCKER-COMPOSE.TRAEFIK.YML ==="
                        if [ -f docker-compose.traefik.yml ]; then
                            cat docker-compose.traefik.yml
                        else
                            echo "❌ docker-compose.traefik.yml não encontrado!"
                        fi
                        echo "============================================="
                        
                        echo "=== CONTEÚDO DO DOCKER-COMPOSE.PORTAINER.YML ==="
                        if [ -f docker-compose.portainer.yml ]; then
                            cat docker-compose.portainer.yml
                        else
                            echo "❌ docker-compose.portainer.yml não encontrado!"
                        fi
                        echo "==============================================="
                    '''
                    
                    // Exibe o conteúdo do arquivo .env
                    sh '''
                        echo "=== CONTEÚDO DO ARQUIVO .ENV ==="
                        cat .env
                        echo "================================"
                    '''
                    
                    // Cria diretórios necessários se não existirem
                    sh '''
                        cd docker
                        mkdir -p traefik/config traefik/certificates portainer/data
                        echo "✅ Diretórios criados/verificados!"
                    '''
                }
            }
        }
        
        stage('Executar Docker Compose') {
            steps {
                script {
                    echo "Executando Docker Compose..."
                    
                    echo "🚀 Executando docker compose up traefik..."
                    sh '''
                        cd docker
                        docker compose -f docker-compose.traefik.yml --env-file .env up -d
                    '''
                    
                    echo "🚀 Executando docker compose up portainer..."
                    sh '''
                        cd docker
                        docker compose -f docker-compose.portainer.yml --env-file .env up -d
                    '''
                    
                    echo "✅ Docker Compose executado com sucesso!"
                    
                    // Verifica status dos containers
                    sh '''
                        echo "=== STATUS DOS CONTAINERS ==="
                        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
                        echo "============================="
                    '''
                }
            }
        }
        
        stage('Verificar Status dos Containers') {
            steps {
                script {
                    echo "Verificando status dos containers..."
                    
                    sh '''
                        echo "=== STATUS DOS CONTAINERS ==="
                        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
                        echo ""
                        echo "=== LOGS DO TRAEFIK ==="
                        docker logs --tail 10 traefik
                        echo ""
                        echo "=== LOGS DO PORTAINER ==="
                        docker logs --tail 10 portainer
                        echo ""
                        echo "=== NETWORKS ==="
                        docker network ls
                        echo ""
                        echo "=== VOLUMES ==="
                        docker volume ls
                    '''
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "Pipeline de configuração do Traefik e Portainer concluído!"
                
                // Limpeza de arquivos temporários
                sh '''
                    echo "🧹 Limpando arquivos temporários..."
                    rm -f /tmp/*.tmp 2>/dev/null || true
                '''
            }
        }
        success {
            script {
                def traefikSubdomain = env.TRAEFIK_SUBDOMAIN ?: 'traefik'
                def defaultDomain = env.DEFAULT_DOMAIN ?: 'exemplo.com'
                def portainerSubdomain = env.PORTAINER_SUBDOMAIN ?: 'portainer'
                def traefikNetwork = env.TRAEFIK_NETWORK ?: 'traefik_network'
                
                echo "✅ Traefik e Portainer configurados com sucesso!"
                echo ""
                echo "=== RESUMO DA CONFIGURAÇÃO ==="
                echo "🌐 Traefik Dashboard: https://${traefikSubdomain}.${defaultDomain}"
                echo "👤 Usuário Traefik: admin"
                echo "🔑 Senha Traefik: [configurada via ADMIN_PASSWORD]"
                echo ""
                echo "🐳 Portainer Dashboard: https://${portainerSubdomain}.${defaultDomain}"
                echo "🌐 Network: ${traefikNetwork}"
                echo "================================"
            }
        }
        failure {
            script {
                echo "❌ Erro durante a configuração do Traefik e Portainer!"
                echo "Verifique os logs acima para mais detalhes."
                
                // Informações de debug em caso de falha
                sh '''
                    echo "=== DEBUG INFO ==="
                    echo "Docker status:"
                    docker ps -a 2>/dev/null || echo "Docker não disponível"
                    echo ""
                    echo "Network status:"
                    docker network ls 2>/dev/null || echo "Docker não disponível"
                    echo "=================="
                '''
            }
        }
        cleanup {
            script {
                echo "🧹 Executando limpeza final..."
                // Garantir que não deixamos arquivos temporários
                sh '''
                    find /tmp -name "*.tmp" -delete 2>/dev/null || true
                '''
            }
        }
    }
} 