pipeline {
    agent {
        label 'jenkins-testes'
    }
    
    environment {
        // Vari√°veis de ambiente que devem ser configuradas no Jenkins
        // TRAEFIK_SUBDOMAIN=traefik
        // DEFAULT_DOMAIN=exemplo.com
        // PORTAINER_SUBDOMAIN=portainer
        // TRAEFIK_NETWORK=traefik_network
    }
    
    stages {
        stage('Verificar Vari√°veis de Ambiente') {
            steps {
                script {
                    echo "=== VERIFICANDO VARI√ÅVEIS DE AMBIENTE ==="
                    
                    // Verifica se as vari√°veis obrigat√≥rias est√£o definidas
                    def requiredVars = ['TRAEFIK_SUBDOMAIN', 'DEFAULT_DOMAIN', 'PORTAINER_SUBDOMAIN', 'ADMIN_PASSWORD']
                    def missingVars = []
                    
                    requiredVars.each { var ->
                        if (!env[var]) {
                            missingVars.add(var)
                        } else {
                            if (var == 'ADMIN_PASSWORD') {
                                echo "‚úÖ ${var}: [CONFIGURADA]"
                            } else {
                                echo "‚úÖ ${var}: ${env[var]}"
                            }
                        }
                    }
                    
                    if (missingVars.size() > 0) {
                        error "‚ùå Vari√°veis obrigat√≥rias n√£o configuradas: ${missingVars.join(', ')}"
                    }
                    
                    // Define a network padr√£o se n√£o estiver configurada
                    if (!env.TRAEFIK_NETWORK) {
                        env.TRAEFIK_NETWORK = 'traefik_network'
                        echo "‚ÑπÔ∏è  TRAEFIK_NETWORK n√£o configurada, usando padr√£o: ${env.TRAEFIK_NETWORK}"
                    } else {
                        echo "‚úÖ TRAEFIK_NETWORK: ${env.TRAEFIK_NETWORK}"
                    }
                    
                    // Exibe as URLs que ser√£o configuradas
                    echo ""
                    echo "=== URLs que ser√£o configuradas ==="
                    echo "üåê Traefik: https://${env.TRAEFIK_SUBDOMAIN}.${env.DEFAULT_DOMAIN}"
                    echo "üê≥ Portainer: https://${env.PORTAINER_SUBDOMAIN}.${env.DEFAULT_DOMAIN}"
                    echo "üåê Network: ${env.TRAEFIK_NETWORK}"
                    echo "====================================="
                }
            }
        }
        
        stage('Criar Network Docker') {
            steps {
                script {
                    echo "Criando network Docker para Traefik..."
                    
                    // Verifica se a network j√° existe
                    def networkExists = sh(
                        script: "docker network ls --format '{{.Name}}' | grep -w '${env.TRAEFIK_NETWORK}'",
                        returnStatus: true
                    ) == 0
                    
                    if (!networkExists) {
                        sh "docker network create ${env.TRAEFIK_NETWORK}"
                        echo "‚úÖ Network ${env.TRAEFIK_NETWORK} criada com sucesso!"
                    } else {
                        echo "‚ÑπÔ∏è  Network ${env.TRAEFIK_NETWORK} j√° existe!"
                    }
                }
            }
        }
        
        stage('Configurar Traefik') {
            steps {
                script {
                    echo "Configurando Traefik..."
                    
                    // Verifica se ADMIN_PASSWORD est√° configurada
                    if (!env.ADMIN_PASSWORD) {
                        error "‚ùå Vari√°vel ADMIN_PASSWORD n√£o configurada! Configure esta vari√°vel no Jenkins."
                    }
                    
                    echo "üîê Usando senha de administrador configurada..."
                    
                    // Gera hash bcrypt da senha
                    def passwordHash = sh(
                        script: "htpasswd -nbB admin '${env.ADMIN_PASSWORD}' | cut -d ':' -f 2",
                        returnStdout: true
                    ).trim()
                    
                    echo "‚úÖ Hash da senha gerado com sucesso!"
                    
                    // Cria diret√≥rio para configura√ß√µes do Traefik
                    sh '''
                        mkdir -p /opt/traefik/config
                        mkdir -p /opt/traefik/certificates
                    '''
                    
                    // Cria arquivo de configura√ß√£o do Traefik
                    sh """
                        cat > /opt/traefik/config/traefik.yml << 'EOF'
api:
  dashboard: true
  insecure: false

entryPoints:
  web:
    address: ":80"
    http:
      redirections:
        entrypoint:
          to: websecure
          scheme: https
  websecure:
    address: ":443"

providers:
  docker:
    endpoint: "unix:///var/run/docker.sock"
    exposedByDefault: false
    network: "${env.TRAEFIK_NETWORK}"

certificatesResolvers:
  letsencrypt:
    acme:
      email: ${env.DEFAULT_EMAIL ?: 'admin@' + env.DEFAULT_DOMAIN}
      storage: /certificates/acme.json
      httpChallenge:
        entryPoint: web

log:
  level: INFO

accessLog: {}
EOF
                    """
                    
                    // Para e remove container Traefik se existir
                    sh '''
                        docker stop traefik 2>/dev/null || true
                        docker rm traefik 2>/dev/null || true
                    '''
                    
                    // Inicia o container Traefik
                    sh """
                        docker run -d \\
                          --name traefik \\
                          --network ${env.TRAEFIK_NETWORK} \\
                          --restart unless-stopped \\
                          -p 80:80 \\
                          -p 443:443 \\
                          -v /var/run/docker.sock:/var/run/docker.sock:ro \\
                          -v /opt/traefik/config:/etc/traefik \\
                          -v /opt/traefik/certificates:/certificates \\
                          -l traefik.enable=true \\
                          -l traefik.http.routers.traefik.rule=Host(\`${env.TRAEFIK_SUBDOMAIN}.${env.DEFAULT_DOMAIN}\`) \\
                          -l traefik.http.routers.traefik.entrypoints=websecure \\
                          -l traefik.http.routers.traefik.tls.certresolver=letsencrypt \\
                          -l traefik.http.routers.traefik.service=api@internal \\
                          -l traefik.http.routers.traefik.middlewares=auth \\
                          -l traefik.http.middlewares.auth.basicauth.users=admin:${passwordHash} \\
                          traefik:v2.10
                    """
                    
                    echo "‚úÖ Traefik configurado e iniciado!"
                    echo "üîê Dashboard: https://${env.TRAEFIK_SUBDOMAIN}.${env.DEFAULT_DOMAIN}"
                    echo "üë§ Usu√°rio: admin"
                    echo "üîë Senha: [configurada via ADMIN_PASSWORD]"
                }
            }
        }
        
        stage('Configurar Portainer') {
            steps {
                script {
                    echo "Configurando Portainer..."
                    
                    // Cria diret√≥rio para dados do Portainer
                    sh '''
                        mkdir -p /opt/portainer/data
                    '''
                    
                    // Para e remove container Portainer se existir
                    sh '''
                        docker stop portainer 2>/dev/null || true
                        docker rm portainer 2>/dev/null || true
                    '''
                    
                    // Inicia o container Portainer
                    sh """
                        docker run -d \\
                          --name portainer \\
                          --network ${env.TRAEFIK_NETWORK} \\
                          --restart unless-stopped \\
                          -v /var/run/docker.sock:/var/run/docker.sock \\
                          -v /opt/portainer/data:/data \\
                          -l traefik.enable=true \\
                          -l traefik.http.routers.portainer.rule=Host(\`${env.PORTAINER_SUBDOMAIN}.${env.DEFAULT_DOMAIN}\`) \\
                          -l traefik.http.routers.portainer.entrypoints=websecure \\
                          -l traefik.http.routers.portainer.tls.certresolver=letsencrypt \\
                          -l traefik.http.services.portainer.loadbalancer.server.port=9000 \\
                          portainer/portainer-ce:latest
                    """
                    
                    echo "‚úÖ Portainer configurado e iniciado!"
                    echo "üê≥ Dashboard: https://${env.PORTAINER_SUBDOMAIN}.${env.DEFAULT_DOMAIN}"
                }
            }
        }
        
        stage('Verificar Status dos Containers') {
            steps {
                script {
                    echo "Verificando status dos containers..."
                    
                    sh '''
                        echo "=== STATUS DOS CONTAINERS ==="
                        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
                        echo ""
                        echo "=== LOGS DO TRAEFIK ==="
                        docker logs --tail 10 traefik
                        echo ""
                        echo "=== LOGS DO PORTAINER ==="
                        docker logs --tail 10 portainer
                        echo ""
                        echo "=== NETWORKS ==="
                        docker network ls
                        echo ""
                        echo "=== VOLUMES ==="
                        docker volume ls
                    '''
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "Pipeline de configura√ß√£o do Traefik e Portainer conclu√≠do!"
            }
        }
        success {
            script {
                echo "‚úÖ Traefik e Portainer configurados com sucesso!"
                echo ""
                echo "=== RESUMO DA CONFIGURA√á√ÉO ==="
                echo "üåê Traefik Dashboard: https://${env.TRAEFIK_SUBDOMAIN}.${env.DEFAULT_DOMAIN}"
                echo "üë§ Usu√°rio Traefik: admin"
                echo "üîë Senha Traefik: [configurada via ADMIN_PASSWORD]"
                echo ""
                echo "üê≥ Portainer Dashboard: https://${env.PORTAINER_SUBDOMAIN}.${env.DEFAULT_DOMAIN}"
                echo "üåê Network: ${env.TRAEFIK_NETWORK}"
                echo "================================"
            }
        }
        failure {
            script {
                echo "‚ùå Erro durante a configura√ß√£o do Traefik e Portainer!"
                echo "Verifique os logs acima para mais detalhes."
            }
        }
    }
} 